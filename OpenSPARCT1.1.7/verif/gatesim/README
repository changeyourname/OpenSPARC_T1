	This file describes the netlist verification support added
to OpenSparcT1 verification enviroment. OpenSparcT1 depends heavily on
XMRs (cross-module references) within the varification
environment. Therefore, dropping in a netlist in place of the RTL core
will produce a high number of XMR errors. In order to overcome this
difficulty, a simple playback support is added.  

	Although we anticipate this method to be useful primarily to
verify FPGA synthesized netlists, it could be potentialy used with
netlists generated by semi-custom synthesis flows as well
(e.g. Synopsys). 

CAUTION - Running this vector playback mechanism on RTL, although
feasible, is not recommended due to some array initializatio
issues. In the gate playback mode, all arrays are explicitly
initialized to zero while as in RTL, some arrays are initialized to
random values. This may result in mismatch in simulation. If RTL
arrays are initialized correctly (zeros) then this mechanism can be
used on RTL as well.  

Verification of a netlist requires following steps:

   1. Run RTL mini or full regression to generate stimuli files for
      netlist verification. To do that add 
      -vcs_build_args=$DV_ROOT/verif/env/cmp/playback_dump.v option to
      the regression command and run.  

      For example, thread1_mini regression command will look like
      following for the SPARC level driver generation,  
      
      % sims -sim_type=vcs -group=thread1_mini -debussy \
        -vcs_build_args=$DV_ROOT/verif/env/cmp/playback_dump.v

      Above regression will generate stimuli.txt file under the run
      directory of each diagnostic. Sample stimuli.txt files are
      included under $DV_ROOT/verif/gatesim for the thread1_mini
       regression (file thread1_mini_stim.tar.gz). 

   2. Create a verilog file list which includes following files 
      $DV_ROOT/verif/env/cmp/playback_driver.v 
      <SPARC level gate netlist>.v
      <library used for synthesis>.v

      Sample flist is provided under $DV_ROOT/verif/gatesim for
      reference (file flist.xilinx_unisims) 

   3. Compile the design to build the gate level model. Again, a
      sample compile script is provided under $DV_ROOT/verif/gatesim
      directory. Usage of the compile script is 

      % build_gates <flist>

   4. Finally, run the simulation by including +stim_file=<path to
      stim file>/stimuli.txt 
   
      If playback fails, the simulation will return with "Playback
      FAILED with # mismatches!" If it passes, it will return with
      "Playback PASSED!" 

      Use fsdb generation options in the compile script to debug
      failing runs. 

      A simple run_gates script is also included for reference under
      $DV_ROOT/verif/gatesim directory. Usage of the run script is 

      % run_gates <path to stim file>


