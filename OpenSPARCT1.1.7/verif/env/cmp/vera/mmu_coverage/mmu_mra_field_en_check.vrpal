// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: mmu_mra_field_en_check.vrpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
////////////////////////////////////////////////////////////////////////
//
//  Module Name:        mmu_mra_field_en_check.vr
//  Description:        Tasks for cehcking MRA field enable ctl
//			and make sure there's no rd/wr contention
//
////////////////////////////////////////////////////////////////////////

#inc "mmu_cov_inc.pal";

#ifndef MMU_MRA_FIELD_EN_CHECK__
#define MMU_MRA_FIELD_EN_CHECK__

#include <vera_defines.vrh>
#include "mmu_ports_binds.vrh"
#include "mmu.if.vrh"
#include "mmu_cov_tasks.vrh"

//------------------------------------------------------------------------------------------

////////////////////////////
// Class definitions
////////////////////////////

class MMU_MRA_FIELD_EN_CHECKS
{
	mmu_mra_fld_en_port mmu_mra_fld_en_bind;

	task new (mmu_mra_fld_en_port mmu_mra_fld_en_bind);
        task find_rd_wr_contention ();
        task check_mra_field_enables ();
}

//------------------------------------------------------------------------------------------

////////////////////////////
// Definitions of methods of class MMU_TLB_ADDR_MATCH
////////////////////////////

task MMU_MRA_FIELD_EN_CHECKS:: new(mmu_mra_fld_en_port mmu_mra_fld_en_bind)
{
        this.mmu_mra_fld_en_bind = mmu_mra_fld_en_bind;
}

//------------------------------------------------------------------------------------------

task MMU_MRA_FIELD_EN_CHECKS:: find_rd_wr_contention()
{
   fork{
       while(1) {
	   @ ( posedge this.mmu_mra_fld_en_bind.\$clk );
	   if(this.mmu_mra_fld_en_bind.\$mra_wr_vld && this.mmu_mra_fld_en_bind.\$mra_rd_vld){
	       if(this.mmu_mra_fld_en_bind.\$mra_wr_ptr == this.mmu_mra_fld_en_bind.\$mra_rd_ptr){
		   printf("%d: ERROR: MRA_CHECK: There's a read/write contention in the MRA. mra_wr/rd ptr = %h\n",
		       get_time(LO), this.mmu_mra_fld_en_bind.\$mra_wr_ptr);
		   repeat(10) @ ( posedge this.mmu_mra_fld_en_bind.\$clk );
		   exit(0);
	       }
	   }
       }
   } join none
}

//------------------------------------------------------------------------------------------

task MMU_MRA_FIELD_EN_CHECKS:: check_mra_field_enables()
{
   fork{
       while(1) {
	   @ ( posedge this.mmu_mra_fld_en_bind.\$clk );
	   if(this.mmu_mra_fld_en_bind.\$mra_wr_vld || this.mmu_mra_fld_en_bind.\$mra_rd_vld){
	       if(this.mmu_mra_fld_en_bind.\$mra_field1_en){
		   if(this.mmu_mra_fld_en_bind.\$mra_field2_en || this.mmu_mra_fld_en_bind.\$mra_field3_en
			  || this.mmu_mra_fld_en_bind.\$mra_field4_en){
		       printf("%d: ERROR: MRA_FIELD_EN_CHK: Another field enabled while tag access update \n",
		           get_time(LO));
		       
		       repeat(10) @ ( posedge this.mmu_mra_fld_en_bind.\$clk );
		       exit(0);
		   }
	       }
	   }
       }
   } join none
}

#endif
