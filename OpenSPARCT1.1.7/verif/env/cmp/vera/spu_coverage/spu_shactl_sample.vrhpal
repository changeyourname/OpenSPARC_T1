// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: spu_shactl_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "spu_rtl.vrh"

#ifndef INC__TMP_spu_shactl_COV_VRH
#define INC__TMP_spu_shactl_COV_VRH
#define SHACTL_IDLE_STATE		`SHACTL_STATE_WIDTH'b1000_0000_0000_0000_0000
#define SHACTL_SHADATRDY_STATE		`SHACTL_STATE_WIDTH'b0100_0000_0000_0000_0000
#define SHACTL_SHAREQDAT_STATE		`SHACTL_STATE_WIDTH'b0010_0000_0000_0000_0000
#define SHACTL_WAIT4LN_STATE		`SHACTL_STATE_WIDTH'b0001_0000_0000_0000_0000
#define SHACTL_WAIT4DATAREG_STATE	`SHACTL_STATE_WIDTH'b0000_1000_0000_0000_0000
#define SHACTL_DESSHADEC_STATE		`SHACTL_STATE_WIDTH'b0000_0100_0000_0000_0000
#define SHACTL_WRDBUFFULL_STATE		`SHACTL_STATE_WIDTH'b0000_0010_0000_0000_0000
#define SHACTL_SHAINPROG_STATE		`SHACTL_STATE_WIDTH'b0000_0001_0000_0000_0000
#define SHACTL_SHAINPROG_DLY_STATE	`SHACTL_STATE_WIDTH'b0000_0000_1000_0000_0000
#define SHACTL_NOSHAINPROG_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0100_0000_0000
#define SHACTL_NOSHAINPROG2_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0010_0000_0000
#define SHACTL_H0UPDATE_STATE		`SHACTL_STATE_WIDTH'b0000_0000_0001_0000_0000
#define SHACTL_H0UPDATE_DLY_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0000_1000_0000
#define SHACTL_H1UPDATE_STATE		`SHACTL_STATE_WIDTH'b0000_0000_0000_0100_0000
#define SHACTL_H1UPDATE_DLY_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0000_0010_0000
#define SHACTL_H2UPDATE_STATE		`SHACTL_STATE_WIDTH'b0000_0000_0000_0001_0000
#define SHACTL_H2UPDATE_DLY_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0000_0000_1000
#define SHACTL_H3UPDATE_STATE		`SHACTL_STATE_WIDTH'b0000_0000_0000_0000_0100
#define SHACTL_H3UPDATE_DLY_STATE	`SHACTL_STATE_WIDTH'b0000_0000_0000_0000_0010
#define SHACTL_H4UPDATE_STATE		`SHACTL_STATE_WIDTH'b0000_0000_0000_0000_0001

#endif
sample spu_shactl_sample_bind_C${c}.\$shactl_state {
  //state declarations

  state s_SHACTL_IDLE_STATE		(SHACTL_IDLE_STATE);
  state s_SHACTL_SHADATRDY_STATE	(SHACTL_SHADATRDY_STATE);
  state s_SHACTL_SHAREQDAT_STATE	(SHACTL_SHAREQDAT_STATE);
  state s_SHACTL_WAIT4LN_STATE		(SHACTL_WAIT4LN_STATE);
  state s_SHACTL_WAIT4DATAREG_STATE	(SHACTL_WAIT4DATAREG_STATE);
  state s_SHACTL_DESSHADEC_STATE	(SHACTL_DESSHADEC_STATE);
  state s_SHACTL_WRDBUFFULL_STATE	(SHACTL_WRDBUFFULL_STATE);
  state s_SHACTL_SHAINPROG_STATE	(SHACTL_SHAINPROG_STATE);
  state s_SHACTL_SHAINPROG_DLY_STATE	(SHACTL_SHAINPROG_DLY_STATE);
  state s_SHACTL_NOSHAINPROG_STATE	(SHACTL_NOSHAINPROG_STATE);
  state s_SHACTL_NOSHAINPROG2_STATE	(SHACTL_NOSHAINPROG2_STATE);
  state s_SHACTL_H0UPDATE_STATE		(SHACTL_H0UPDATE_STATE);
  state s_SHACTL_H0UPDATE_DLY_STATE	(SHACTL_H0UPDATE_DLY_STATE);
  state s_SHACTL_H1UPDATE_STATE		(SHACTL_H1UPDATE_STATE);
  state s_SHACTL_H1UPDATE_DLY_STATE	(SHACTL_H1UPDATE_DLY_STATE);
  state s_SHACTL_H2UPDATE_STATE		(SHACTL_H2UPDATE_STATE);
  state s_SHACTL_H2UPDATE_DLY_STATE	(SHACTL_H2UPDATE_DLY_STATE);
  state s_SHACTL_H3UPDATE_STATE		(SHACTL_H3UPDATE_STATE);
  state s_SHACTL_H3UPDATE_DLY_STATE	(SHACTL_H3UPDATE_DLY_STATE);
  state s_SHACTL_H4UPDATE_STATE		(SHACTL_H4UPDATE_STATE);

  bad_state s_not_SHACTL_STATE (not state);

  // transitions

  trans t_SHACTL_IDLE_2_IDLE_STATE (SHACTL_IDLE_STATE -> SHACTL_IDLE_STATE);
  trans t_SHACTL_SHADATRDY_2_IDLE_STATE (SHACTL_SHADATRDY_STATE -> SHACTL_IDLE_STATE);
  trans t_SHACTL_H4UPDATE_2_IDLE_STATE (SHACTL_H4UPDATE_STATE -> SHACTL_IDLE_STATE);
  trans t_SHACTL_WRDBUFFULL_2_IDLE_STATE (SHACTL_WRDBUFFULL_STATE -> SHACTL_IDLE_STATE);
  trans t_SHACTL_DESSHADEC_2_IDLE_STATE (SHACTL_DESSHADEC_STATE -> SHACTL_IDLE_STATE);  // has to be reset to idle state because DEC is not completed
  trans t_SHACTL_WAIT4DATAREG_2_IDLE_STATE (SHACTL_WAIT4DATAREG_STATE -> SHACTL_IDLE_STATE);  // has to be reset to idle state because DEC is not completed

  trans t_SHACTL_IDLE_2_SHADATRDY_STATE (SHACTL_IDLE_STATE -> SHACTL_SHADATRDY_STATE);
  trans t_SHACTL_H4UPDATE_2_SHADATRDY_STATE (SHACTL_H4UPDATE_STATE -> SHACTL_SHADATRDY_STATE);
  trans t_SHACTL_WRDBUFFULL_2_SHADATRDY_STATE (SHACTL_WRDBUFFULL_STATE -> SHACTL_SHADATRDY_STATE);

  trans t_SHACTL_SHAREQDAT_2_SHAREQDAT_STATE (SHACTL_SHAREQDAT_STATE -> SHACTL_SHAREQDAT_STATE);
  trans t_SHACTL_SHADATRDY_2_SHAREQDAT_STATE (SHACTL_SHADATRDY_STATE -> SHACTL_SHAREQDAT_STATE);

  trans t_SHACTL_WAIT4LN_2_WAIT4LN_STATE (SHACTL_WAIT4LN_STATE -> SHACTL_WAIT4LN_STATE);
  trans t_SHACTL_SHAREQDAT_2_WAIT4LN_STATE (SHACTL_SHAREQDAT_STATE -> SHACTL_WAIT4LN_STATE);

  trans t_SHACTL_SHADATRDY_2_WAIT4DATAREG_STATE (SHACTL_SHADATRDY_STATE -> SHACTL_WAIT4DATAREG_STATE);
  trans t_SHACTL_WAIT4DATAREG_2_WAIT4DATAREG_STATE (SHACTL_WAIT4DATAREG_STATE -> SHACTL_WAIT4DATAREG_STATE);

  trans t_SHACTL_DESSHADEC_2_DESSHADEC_STATE (SHACTL_DESSHADEC_STATE -> SHACTL_DESSHADEC_STATE);
  trans t_SHACTL_SHADATRDY_2_DESSHADEC_STATE (SHACTL_SHADATRDY_STATE -> SHACTL_DESSHADEC_STATE);

  trans t_SHACTL_WRDBUFFULL_2_WRDBUFFULL_STATE (SHACTL_WRDBUFFULL_STATE -> SHACTL_WRDBUFFULL_STATE);
  trans t_SHACTL_DESSHADEC_2_WRDBUFFULL_STATE (SHACTL_DESSHADEC_STATE -> SHACTL_WRDBUFFULL_STATE);
  trans t_SHACTL_WAIT4DATAREG_2_WRDBUFFULL_STATE (SHACTL_WAIT4DATAREG_STATE -> SHACTL_WRDBUFFULL_STATE);
  trans t_SHACTL_SHADATRDY_2_WRDBUFFULL_STATE (SHACTL_SHADATRDY_STATE -> SHACTL_WRDBUFFULL_STATE);
  trans t_SHACTL_WAIT4LN_2_WRDBUFFULL_STATE (SHACTL_WAIT4LN_STATE -> SHACTL_WRDBUFFULL_STATE);

  trans t_SHACTL_WRDBUFFULL_2_SHAINPROG_STATE (SHACTL_WRDBUFFULL_STATE -> SHACTL_SHAINPROG_STATE);
  trans t_SHACTL_NOSHAINPROG2_2_SHAINPROG_STATE (SHACTL_NOSHAINPROG2_STATE -> SHACTL_SHAINPROG_STATE);

  trans t_SHACTL_SHAINPROG_2_NOSHAINPROG_STATE (SHACTL_SHAINPROG_STATE -> SHACTL_NOSHAINPROG_STATE);

  trans t_SHACTL_NOSHAINPROG_2_NOSHAINPROG2_STATE (SHACTL_NOSHAINPROG_STATE -> SHACTL_NOSHAINPROG2_STATE);

  trans t_SHACTL_SHAINPROG_2_SHAINPROG_DLY_STATE (SHACTL_SHAINPROG_STATE -> SHACTL_SHAINPROG_DLY_STATE);
  
  trans t_SHACTL_SHAINPROG_DLY_2_H0UPDATE_STATE (SHACTL_SHAINPROG_DLY_STATE -> SHACTL_H0UPDATE_STATE);

  trans t_SHACTL_H0UPDATE_2_H0UPDATE_DLY_STATE (SHACTL_H0UPDATE_STATE -> SHACTL_H0UPDATE_DLY_STATE);

  trans t_SHACTL_H0UPDATE_DLY_2_H1UPDATE_STATE (SHACTL_H0UPDATE_DLY_STATE -> SHACTL_H1UPDATE_STATE);

  trans t_SHACTL_H1UPDATE_2_H1UPDATE_DLY_STATE (SHACTL_H1UPDATE_STATE -> SHACTL_H1UPDATE_DLY_STATE);

  trans t_SHACTL_H1UPDATE_DLY_2_H2UPDATE_STATE (SHACTL_H1UPDATE_DLY_STATE -> SHACTL_H2UPDATE_STATE);

  trans t_SHACTL_H2UPDATE_2_H2UPDATE_DLY_STATE (SHACTL_H2UPDATE_STATE -> SHACTL_H2UPDATE_DLY_STATE);

  trans t_SHACTL_H2UPDATE_DLY_2_H3UPDATE_STATE (SHACTL_H2UPDATE_DLY_STATE -> SHACTL_H3UPDATE_STATE);

  trans t_SHACTL_H3UPDATE_2_H3UPDATE_DLY_STATE (SHACTL_H3UPDATE_STATE -> SHACTL_H3UPDATE_DLY_STATE);

  trans t_SHACTL_H3UPDATE_DLY_2_H4UPDATE_STATE (SHACTL_H3UPDATE_DLY_STATE -> SHACTL_H4UPDATE_STATE);

  bad_trans t_not_SHACTL_TRANS (not trans);
}
