// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: spu_maaeqb_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "spu_rtl.vrh"

#ifndef INC__TMP_spu_maaeqb_COV_VRH
#define INC__TMP_spu_maaeqb_COV_VRH
#define MAAEQB_IDLE_STATE                    	  `MA_AEQB_STATE_WIDTH'b100_0000_0000_0000_0000_0000
#define MAAEQB_IDLE_DLY_STATE                	  `MA_AEQB_STATE_WIDTH'b010_0000_0000_0000_0000_0000
#define MAAEQB_ILOOPA_STATE  		     	  `MA_AEQB_STATE_WIDTH'b001_0000_0000_0000_0000_0000
#define MAAEQB_ILOOPA1_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_1000_0000_0000_0000_0000
#define MAAEQB_ILOOPN_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0100_0000_0000_0000_0000
#define MAAEQB_IJLOOPA_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0010_0000_0000_0000_0000
#define MAAEQB_JLOOPA_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0001_0000_0000_0000_0000
#define MAAEQB_JLOOPM_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0000_1000_0000_0000_0000
#define MAAEQB_JLOOPN_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0100_0000_0000_0000
#define MAAEQB_MWRITE_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0010_0000_0000_0000
#define MAAEQB_NPRIME_STATE  		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0001_0000_0000_0000
#define MAAEQB_ACCUMSHFT_STATE   	     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_1000_0000_0000
#define MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0100_0000_0000
#define MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE `MA_AEQB_STATE_WIDTH'b000_0000_0000_0010_0000_0000
#define MAAEQB_ILOOPA_DLY_STATE  	          `MA_AEQB_STATE_WIDTH'b000_0000_0000_0001_0000_0000
#define MAAEQB_ILOOPA1_DLY_STATE 	     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_1000_0000
#define MAAEQB_IJLOOPA_DLY_STATE 	     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0100_0000
#define MAAEQB_RESULT_C1_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0010_0000
#define MAAEQB_RESULT_C2_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0001_0000
#define MAAEQB_RESULT_C3_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0000_1000
#define MAAEQB_RESULT_C4_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0000_0100
#define MAAEQB_RESULT_C5_STATE 		     	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0000_0010
#define MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_STATE 	  `MA_AEQB_STATE_WIDTH'b000_0000_0000_0000_0000_0001

#endif
sample spu_maaeqb_sample_bind_C${c}.\$ma_aeqb_state {
  //state declarations

  state s_MAAEQB_IDLE_STATE	 	(MAAEQB_IDLE_STATE);
  state s_MAAEQB_IDLE_DLY_STATE	 	(MAAEQB_IDLE_DLY_STATE);
  state s_MAAEQB_ILOOPA_STATE	 	(MAAEQB_ILOOPA_STATE);
  state s_MAAEQB_ILOOPA1_STATE		(MAAEQB_ILOOPA1_STATE);
  state s_MAAEQB_ILOOPN_STATE	 	(MAAEQB_ILOOPN_STATE);
  state s_MAAEQB_IJLOOPA_STATE		(MAAEQB_IJLOOPA_STATE);
  state s_MAAEQB_JLOOPA_STATE	 	(MAAEQB_JLOOPA_STATE);
  state s_MAAEQB_JLOOPM_STATE	 	(MAAEQB_JLOOPM_STATE);
  state s_MAAEQB_JLOOPN_STATE	 	(MAAEQB_JLOOPN_STATE);
  state s_MAAEQB_MWRITE_STATE	 	(MAAEQB_MWRITE_STATE);
  state s_MAAEQB_NPRIME_STATE	 	(MAAEQB_NPRIME_STATE);
  state s_MAAEQB_ACCUMSHFT_STATE	(MAAEQB_ACCUMSHFT_STATE);
  state s_MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE (MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE);
  state s_MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE (MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE);
  state s_MAAEQB_ILOOPA_DLY_STATE	(MAAEQB_ILOOPA_DLY_STATE);
  state s_MAAEQB_ILOOPA1_DLY_STATE	(MAAEQB_ILOOPA1_DLY_STATE);
  state s_MAAEQB_IJLOOPA_DLY_STATE	(MAAEQB_IJLOOPA_DLY_STATE);
  state s_MAAEQB_RESULT_C1_STATE	(MAAEQB_RESULT_C1_STATE);
  state s_MAAEQB_RESULT_C2_STATE	(MAAEQB_RESULT_C2_STATE);
  state s_MAAEQB_RESULT_C3_STATE	(MAAEQB_RESULT_C3_STATE);
  state s_MAAEQB_RESULT_C4_STATE	(MAAEQB_RESULT_C4_STATE);
  state s_MAAEQB_RESULT_C5_STATE	(MAAEQB_RESULT_C5_STATE);
  state s_MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_STATE	(MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_STATE);

  bad_state s_not_MAAEQB_STATE (not state);

  // transitions

  trans t_MAAEQB_IDLE_2_IDLE_STATE (MAAEQB_IDLE_STATE -> MAAEQB_IDLE_STATE);
  trans t_MAAEQB_ACCUMSHFT_2_IDLE_STATE (MAAEQB_ACCUMSHFT_STATE -> MAAEQB_IDLE_STATE);

  trans t_MAAEQB_ILOOPA_2_ILOOPA_STATE (MAAEQB_ILOOPA_STATE -> MAAEQB_ILOOPA_STATE);
  trans t_MAAEQB_ILOOPA1_DLY_2_ILOOPA_STATE (MAAEQB_ILOOPA1_DLY_STATE -> MAAEQB_ILOOPA_STATE);

  trans t_MAAEQB_IDLE_2_IDLE_DLY_STATE (MAAEQB_IDLE_STATE -> MAAEQB_IDLE_DLY_STATE);

  trans t_MAAEQB_IDLE_DLY_2_ILOOPA1_STATE (MAAEQB_IDLE_DLY_STATE -> MAAEQB_ILOOPA1_STATE);
  trans t_MAAEQB_IJLOOPA_2_ILOOPA1_STATE (MAAEQB_IJLOOPA_STATE -> MAAEQB_ILOOPA1_STATE);
  trans t_MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE_2_ILOOPA1_STATE (MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE -> MAAEQB_ILOOPA1_STATE);

  trans t_MAAEQB_ILOOPN_2_ILOOPN_STATE (MAAEQB_ILOOPN_STATE -> MAAEQB_ILOOPN_STATE);
  trans t_MAAEQB_MWRITE_2_ILOOPN_STATE (MAAEQB_MWRITE_STATE -> MAAEQB_ILOOPN_STATE);

  trans t_MAAEQB_IJLOOPA_2_IJLOOPA_STATE (MAAEQB_IJLOOPA_STATE -> MAAEQB_IJLOOPA_STATE);
  trans t_MAAEQB_JLOOPA_2_IJLOOPA_STATE (MAAEQB_JLOOPA_STATE -> MAAEQB_IJLOOPA_STATE);

  trans t_MAAEQB_IJLOOPA_2_JLOOPA_STATE (MAAEQB_IJLOOPA_STATE -> MAAEQB_JLOOPA_STATE);
  trans t_MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE_2_JLOOPA_STATE (MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE -> MAAEQB_JLOOPA_STATE);

  trans t_MAAEQB_JLOOPN_2_JLOOPM_STATE (MAAEQB_JLOOPN_STATE -> MAAEQB_JLOOPM_STATE);
  trans t_MAAEQB_IJLOOPA_DLY_2_JLOOPM_STATE (MAAEQB_IJLOOPA_DLY_STATE -> MAAEQB_JLOOPM_STATE);
  trans t_MAAEQB_ILOOPA_DLY_2_JLOOPM_STATE (MAAEQB_ILOOPA_DLY_STATE -> MAAEQB_JLOOPM_STATE);

  trans t_MAAEQB_JLOOPN_2_JLOOPN_STATE (MAAEQB_JLOOPN_STATE -> MAAEQB_JLOOPN_STATE);
  trans t_MAAEQB_JLOOPM_2_JLOOPN_STATE (MAAEQB_JLOOPM_STATE -> MAAEQB_JLOOPN_STATE);

  trans t_MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_2_MWRITE_STATE (MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_STATE -> MAAEQB_MWRITE_STATE);
  trans t_MAAEQB_RESULT_C5_2_MWRITE_STATE (MAAEQB_RESULT_C5_STATE -> MAAEQB_MWRITE_STATE);

  trans t_MAAEQB_NPRIME_2_NPRIME_STATE (MAAEQB_NPRIME_STATE -> MAAEQB_NPRIME_STATE);
  trans t_MAAEQB_ILOOPA_2_NPRIME_STATE (MAAEQB_ILOOPA_STATE -> MAAEQB_NPRIME_STATE);
  trans t_MAAEQB_JLOOPN_2_NPRIME_STATE (MAAEQB_JLOOPN_STATE -> MAAEQB_NPRIME_STATE);

  trans t_MAAEQB_ACCUMSHFT_2_ACCUMSHFT_STATE (MAAEQB_ACCUMSHFT_STATE -> MAAEQB_ACCUMSHFT_STATE);
  trans t_MAAEQB_MWRITE_2_ACCUMSHFT_STATE (MAAEQB_MWRITE_STATE -> MAAEQB_ACCUMSHFT_STATE);
  trans t_MAAEQB_ILOOPN_2_ACCUMSHFT_STATE (MAAEQB_ILOOPN_STATE -> MAAEQB_ACCUMSHFT_STATE);

  trans t_MAAEQB_ACCUMSHFT_2_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE (MAAEQB_ACCUMSHFT_STATE -> MAAEQB_TR2JLOOPA_FRM_ACCUMSHFT_DLY_STATE);

  trans t_MAAEQB_ACCUMSHFT_2_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE (MAAEQB_ACCUMSHFT_STATE -> MAAEQB_TR2ILOOPA1_FRM_ACCUMSHFT_DLY_STATE);

  trans t_MAAEQB_ILOOPA_2_ILOOPA_DLY_STATE (MAAEQB_ILOOPA_STATE -> MAAEQB_ILOOPA_DLY_STATE);

  trans t_MAAEQB_ILOOPA1_2_ILOOPA1_DLY_STATE (MAAEQB_ILOOPA1_STATE -> MAAEQB_ILOOPA1_DLY_STATE);

  trans t_MAAEQB_IJLOOPA_2_IJLOOPA_DLY_STATE (MAAEQB_IJLOOPA_STATE -> MAAEQB_IJLOOPA_DLY_STATE);

  trans t_MAAEQB_NPRIME_2_RESULT_C1_STATE (MAAEQB_NPRIME_STATE -> MAAEQB_RESULT_C1_STATE);
  trans t_MAAEQB_JLOOPN_2_RESULT_C1_STATE (MAAEQB_JLOOPN_STATE -> MAAEQB_RESULT_C1_STATE);

  trans t_MAAEQB_RESULT_C1_2_RESULT_C2_STATE (MAAEQB_RESULT_C1_STATE -> MAAEQB_RESULT_C2_STATE);
  trans t_MAAEQB_RESULT_C2_2_RESULT_C3_STATE (MAAEQB_RESULT_C2_STATE -> MAAEQB_RESULT_C3_STATE);
  trans t_MAAEQB_RESULT_C3_2_RESULT_C4_STATE (MAAEQB_RESULT_C3_STATE -> MAAEQB_RESULT_C4_STATE);
  trans t_MAAEQB_RESULT_C4_2_RESULT_C5_STATE (MAAEQB_RESULT_C4_STATE -> MAAEQB_RESULT_C5_STATE);

  trans t_MAAEQB_ACCUMSHFT_2_TR2MWRITE_FRM_ACCUMSHFT_STATE (MAAEQB_ACCUMSHFT_STATE -> MAAEQB_TR2MWRITE_FRM_ACCUMSHFT_STATE);

  //bad_trans t_not_MAAEQB_TRANS (not trans);
}
