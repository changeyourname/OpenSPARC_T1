// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: spu_spu_while_exu_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "spu_rtl.vrh"
#include "spu_monitors.vrh"

#ifndef INC__TMP_spu_spu_while_exu_COV_VRH
#define INC__TMP_spu_spu_while_exu_COV_VRH

/*
 * Order of the signals in mul_mon_state. See spu_monitors.vr.
 * {spuMulReqAsserted,exuMulReqAsserted}
 */

#define SPU_WHILE_EXU_NO_REQ_STATE   2'b00
#define SPU_WHILE_EXU_SPU_REQ_STATE  2'b10
#define SPU_WHILE_EXU_EXU_REQ_STATE  2'b01
#define SPU_WHILE_EXU_BOTH_REQ_STATE 2'b11

/*
 * spu_spu_while_exu_cov
 *
 * This coverage object checks that we cover the cases of sweeping
 * the assertion of spu_mul request across a continuous assertion
 * of exu_mul requests.
 *
 * We want to cover the case of the spu req happening 1 cycles before
 * to 8 cycles during the exu requests.
 *
 * TODO: Need to determine that the spu request is eventually
 * serviced even though the exu requests are still coming.
 *
 */

#endif

sample mul_sample_monitor_C${c}.spu_while_exu_sample_state {
  // Declare states to be covered 
  state s_SPU_WHILE_EXU_NO_REQ_STATE (SPU_WHILE_EXU_NO_REQ_STATE);
  state s_SPU_WHILE_EXU_SPU_REQ_STATE (SPU_WHILE_EXU_SPU_REQ_STATE);
  state s_SPU_WHILE_EXU_EXU_REQ_STATE (SPU_WHILE_EXU_EXU_REQ_STATE);
  state s_SPU_WHILE_EXU_BOTH_REQ_STATE (SPU_WHILE_EXU_BOTH_REQ_STATE);

  // Declare bad states
  // Declare transitions to be covered
  // Declare bad transitions
}
