// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: ifu_ifill_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
// ***************************************************************************
//
// File:	ifu_ifill_cov.vr
// Description:
// This coverage object covers conditions with the cpxpkts
//
//
// 9'b: pktvld,thrid,first_pkt,second_pkt,l2_ce,l2_ue,xover,nc
//
// ***************************************************************************


// coverage_def IFU_IFILL_COV (bit [8:0] cov_vector)
// {
   state s_T0_pkt1_l2ue                 (9'b1_00_1_0_0_1_0_0); 
   state s_T0_pkt1_l2ce                 (9'b1_00_1_0_1_0_0_0); 
   state s_T0_pkt2_l2ue                 (9'b1_00_0_1_0_1_0_0); 
   state s_T0_pkt2_l2ce                 (9'b1_00_0_1_1_0_0_0);
   wildcard trans t_T0_pkt1_pkt2_l2ue   (9'b1_00_1_0_0_1_0_0 -> 9'b1_00_0_1_0_1_0_0,
					9'b1_00_1_0_0_1_0_0 -> 
                                         [9'b0_xx_x_x_x_x_x,9'b1_01_x_x_x_x_x,9'b1_10_x_x_x_x_x,9'b1_11_x_x_x_x_x][.1:1000.] -> 
					 9'b1_00_0_1_0_1_0_0);
   wildcard trans t_T0_pkt1_pkt2_l2ce   (9'b1_00_1_0_1_0_0_0 -> 9'b1_00_0_1_1_0_0_0,
					9'b1_00_1_0_1_0_0_0 -> 
					 [9'b0_xx_x_x_x_x_x,9'b1_01_x_x_x_x_x,9'b1_10_x_x_x_x_x,9'b1_11_x_x_x_x_x][.1:1000.] -> 
					 9'b1_00_0_1_1_0_0_0);
   wildcard trans t_T0_pkt1_l2ue_pkt2_l2ce  (9'b1_00_1_0_0_1_0_0 -> 9'b1_00_0_1_1_0_0_0,
					9'b1_00_1_0_0_1_0_0 -> 
					     [9'b0_xx_x_x_x_x_x,9'b1_01_x_x_x_x_x,9'b1_10_x_x_x_x_x,9'b1_11_x_x_x_x_x][.1:1000.] -> 
					     9'b1_00_0_1_1_0_0_0);
   wildcard trans t_T0_pkt1_l2ce_pkt2_l2ue  (9'b1_00_1_0_1_0_0_0 -> 9'b1_00_0_1_0_1_0_0,
					9'b1_00_1_0_1_0_0_0 -> 
					     [9'b0_xx_x_x_x_x_x,9'b1_01_x_x_x_x_x,9'b1_10_x_x_x_x_x,9'b1_11_x_x_x_x_x][.1:1000.] -> 
					     9'b1_00_0_1_0_1_0_0);
   wildcard state s_T0_uc_pkt_ue        (9'b1_00_x_x_0_1_0_1);
   wildcard state s_T0_uc_pkt_ce        (9'b1_00_x_x_1_0_0_1);
   state s_T0_pkt1_l2ue_xover           (9'b1_00_1_0_0_1_1_0);
   state s_T0_pkt1_l2ce_xover           (9'b1_00_1_0_1_0_1_0);
   state s_T0_pkt2_l2ue_xover           (9'b1_00_0_1_0_1_1_0);
   state s_T0_pkt2_l2ce_xover           (9'b1_00_0_1_1_0_1_0);

   state s_T1_pkt1_l2ue                 (9'b1_01_1_0_0_1_0_0); 
   state s_T1_pkt1_l2ce                 (9'b1_01_1_0_1_0_0_0); 
   state s_T1_pkt2_l2ue                 (9'b1_01_0_1_0_1_0_0); 
   state s_T1_pkt2_l2ce                 (9'b1_01_0_1_1_0_0_0);
   wildcard trans t_T1_pkt1_pkt2_l2ue   (9'b1_01_1_0_0_1_0_0 -> 9'b1_01_0_1_0_1_0_0,
					9'b1_01_1_0_0_1_0_0 -> 
					 [9'b0_xx_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					 9'b1_01_0_1_0_1_0_0);
   wildcard trans t_T1_pkt1_pkt2_l2ce   (9'b1_01_1_0_1_0_0_0 -> 9'b1_01_0_1_1_0_0_0,
					9'b1_01_1_0_1_0_0_0 -> 
					 [9'b0_xx_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					 9'b1_01_0_1_1_0_0_0);
   wildcard trans t_T1_pkt1_l2ue_pkt2_l2ce  (9'b1_01_1_0_0_1_0_0 -> 9'b1_01_0_1_1_0_0_0,
					9'b1_01_1_0_0_1_0_0 -> 
					 [9'b0_xx_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] ->
					     9'b1_01_0_1_1_0_0_0);
   wildcard trans t_T1_pkt1_l2ce_pkt2_l2ue  (9'b1_01_1_0_1_0_0_0 -> 9'b1_01_0_1_0_1_0_0,
					9'b1_01_1_0_1_0_0_0 -> 
					 [9'b0_xx_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] ->
					     9'b1_01_0_1_0_1_0_0);
   wildcard state s_T1_uc_pkt_ue        (9'b1_01_x_x_0_1_0_1);
   wildcard state s_T1_uc_pkt_ce        (9'b1_01_x_x_1_0_0_1);
   state s_T1_pkt1_l2ue_xover           (9'b1_01_1_0_0_1_1_0);
   state s_T1_pkt1_l2ce_xover           (9'b1_01_1_0_1_0_1_0);
   state s_T1_pkt2_l2ue_xover           (9'b1_01_0_1_0_1_1_0);
   state s_T1_pkt2_l2ce_xover           (9'b1_01_0_1_1_0_1_0);

   state s_T2_pkt1_l2ue                 (9'b1_10_1_0_0_1_0_0); 
   state s_T2_pkt1_l2ce                 (9'b1_10_1_0_1_0_0_0); 
   state s_T2_pkt2_l2ue                 (9'b1_10_0_1_0_1_0_0); 
   state s_T2_pkt2_l2ce                 (9'b1_10_0_1_1_0_0_0);
   wildcard trans t_T2_pkt1_pkt2_l2ue   (9'b1_10_1_0_0_1_0_0 -> 9'b1_10_0_1_0_1_0_0,
					9'b1_10_1_0_0_1_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_10_0_1_0_1_0_0);
   wildcard trans t_T2_pkt1_pkt2_l2ce   (9'b1_10_1_0_1_0_0_0 -> 9'b1_10_0_1_1_0_0_0,
					9'b1_10_1_0_1_0_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_10_0_1_1_0_0_0);
   wildcard trans t_T2_pkt1_l2ue_pkt2_l2ce  (9'b1_10_1_0_0_1_0_0 -> 9'b1_10_0_1_1_0_0_0,
					9'b1_10_1_0_0_1_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_10_0_1_1_0_0_0);
   wildcard trans t_T2_pkt1_l2ce_pkt2_l2ue  (9'b1_10_1_0_1_0_0_0 -> 9'b1_10_0_1_0_1_0_0,
					9'b1_10_1_0_1_0_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x,9'b1_11_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_10_0_1_0_1_0_0);
   wildcard state s_T2_uc_pkt_ue        (9'b1_10_x_x_0_1_0_1);
   wildcard state s_T2_uc_pkt_ce        (9'b1_10_x_x_1_0_0_1);
   state s_T2_pkt1_l2ue_xover           (9'b1_10_1_0_0_1_1_0);
   state s_T2_pkt1_l2ce_xover           (9'b1_10_1_0_1_0_1_0);
   state s_T2_pkt2_l2ue_xover           (9'b1_10_0_1_0_1_1_0);
   state s_T2_pkt2_l2ce_xover           (9'b1_10_0_1_1_0_1_0);

   state s_T3_pkt1_l2ue                 (9'b1_11_1_0_0_1_0_0); 
   state s_T3_pkt1_l2ce                 (9'b1_11_1_0_1_0_0_0); 
   state s_T3_pkt2_l2ue                 (9'b1_11_0_1_0_1_0_0); 
   state s_T3_pkt2_l2ce                 (9'b1_11_0_1_1_0_0_0);
   wildcard trans t_T3_pkt1_pkt2_l2ue   (9'b1_11_1_0_0_1_0_0 -> 9'b1_11_0_1_0_1_0_0, //or
                                         9'b1_11_1_0_0_1_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_11_0_1_0_1_0_0);
   wildcard trans t_T3_pkt1_pkt2_l2ce   (9'b1_11_1_0_1_0_0_0 -> 9'b1_11_0_1_1_0_0_0, //or
                                         9'b1_11_1_0_1_0_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x][.1:1000.] -> 
					9'b1_11_0_1_1_0_0_0);
   wildcard trans t_T3_pkt1_l2ue_pkt2_l2ce  (9'b1_11_1_0_0_1_0_0 -> 9'b1_11_0_1_1_0_0_0, //or
                                             9'b1_11_1_0_0_1_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x][.1:1000.] -> 
                                             9'b1_11_0_1_1_0_0_0);
   wildcard trans t_T3_pkt1_l2ce_pkt2_l2ue  (9'b1_11_1_0_1_0_0_0 -> 9'b1_11_0_1_0_1_0_0, //or
                                             9'b1_11_1_0_1_0_0_0 -> 
				[9'b0_xx_x_x_x_x_x_x,9'b1_01_x_x_x_x_x_x,9'b1_10_x_x_x_x_x_x,9'b1_00_x_x_x_x_x_x][.1:1000.] -> 
                                             9'b1_11_0_1_0_1_0_0);
   wildcard state s_T3_uc_pkt_ue        (9'b1_11_x_x_0_1_0_1);
   wildcard state s_T3_uc_pkt_ce        (9'b1_11_x_x_1_0_0_1);
   state s_T3_pkt1_l2ue_xover           (9'b1_11_1_0_0_1_1_0);
   state s_T3_pkt1_l2ce_xover           (9'b1_11_1_0_1_0_1_0);
   state s_T3_pkt2_l2ue_xover           (9'b1_11_0_1_0_1_1_0);
   state s_T3_pkt2_l2ce_xover           (9'b1_11_0_1_1_0_1_0);
   
// }
