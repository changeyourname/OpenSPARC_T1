// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: fpu_ports_binds.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#inc "fpu_cov_inc.pal";
#ifndef __FPU_PORTS_BINDS_VRH__
#define __FPU_PORTS_BINDS_VRH__

// FPU coverage ports definition

port fpu_valid_bits_cov_port {
    fpu_valid_state;
.for ( $i = 1; $i <= 6; $i++ ) {
//   a${i}stg_fadd;
.}
.for ( $i = 1; $i <= 6; $i++ ) {
//   m${i}stg_fmul;
.}
.for ( $i = 1; $i <= 6; $i++ ) {
//   d${i}stg_fdiv;
.}
}

port fpu_add_ashift_cov_port {
    fpu_add_ashift_state;
 // a2stg_fadd;
 // a2stg_shr_cnt;
}

port fpu_add_nshift_cov_port {
    fpu_add_nshift_state;
 // a4stg_fadd;
 // a4stg_shl_cnt;
} 

port fpu_add_stickya_cov_port {
    fpu_add_stickya_state;
 // a2stg_fadd;
 // a2stg_shr;
} 
port fpu_add_stickyb_cov_port {
    fpu_add_stickyb_state;
 // a2stg_fadd;
 // a2stg_shr_tmp4;
} 
//port fpu_add_stickyc_cov_port {
//    fpu_ADD_STICKYC_state;
 // a2stg_fadd;
 // a2stg_shr;
 // a2stg_shr_tmp4;
//} 

port fpu_input_queue_cov_port {
    fpu_input_queue_state;
 // inq_rdptr;
 // inq_wrptr;
}

port fpu_fdiv_input_queue_cov_port {
    fpu_fdiv_input_queue_state;
 // inq_rdptr;
 // inq_wrptr;
}

port fpu_mul_lsticky_cov_port {
    fpu_mul_lsticky_state;
 // m4stg_shl;
 // m4stg_fmul;
}

port fpu_mul_rsticky_cov_port {
    fpu_mul_rsticky_state;
 // m4stg_shr;
 // m4stg_fmul;
}

port fpu_fadd_ieee_flags_cov_port {
    fpu_valid_state;
 // add_exc_out;
 // a6stg_fadd;
}
port fpu_fmul_ieee_flags_cov_port {
    fpu_valid_state;
 // mul_exc_out;
 // m6stg_fmul;
}
port fpu_fdiv_ieee_flags_cov_port {
    fpu_valid_state;
 // div_exc_out;
 // d6stg_fdiv;
}

port fpu_fdiv_sticky_cov_port {
    fpu_fdiv_sticky_state;
 // div_frac_add_in1;
 // d6stg_frac_0;
 // d6stg_frac_29;
}

port fpu_fdiv_norm_cov_port {
    fpu_valid_state;
 // div_shl_cnt;
}

port fpu_add_inc_exp_cov_port {
    fpu_valid_state;
 // a4stg_fadd;  
 // a4stg_rndadd_cout ;
 // add_exp_out_expinc;
 // add_exp_out_exp   ;
 // add_exp_out_exp1  ;
 // add_exp_out_expadd;
}

port fpu_mul_inc_exp_cov_port {
    fpu_valid_state;
 // m4stg_fmul;
 // m5stg_fracadd_cout;    
 // mul_exp_out_exp_plus1; 
 // m4stg_inc_exp_54;      
 // m4stg_inc_exp_55;     
 // m4stg_inc_exp_105;    

}

bind fpu_valid_bits_cov_port fpu_valid_bits_cov_sample_bind0 {
    fpu_valid_state  {
.for ( $i = 1; $i <= 6; $i++ ) {
			fpu_cov_top.a${i}stg_fadd,	
.}
.for ( $i = 1; $i <= 6; $i++ ) {
			fpu_cov_top.m${i}stg_fmul,
.}
.for ( $i = 1; $i <= 5; $i++ ) {
			fpu_cov_top.d${i}stg_fdiv,
.}
			fpu_cov_top.d6stg_fdiv
		     };
.for ( $i = 1; $i <= 6; $i++ ) {
//    a${i}stg_fadd    fpu_cov_top.a${i}stg_fadd;	
.}
.for ( $i = 1; $i <= 6; $i++ ) {
//    m${i}stg_fmul    fpu_cov_top.m${i}stg_fmul;
.}
.for ( $i = 1; $i <= 6; $i++ ) {
//    d${i}stg_fdiv    fpu_cov_top.d${i}stg_fdiv;
.}
}

bind fpu_add_ashift_cov_port fpu_add_ashift_cov_sample_bind1 {
    fpu_add_ashift_state	{
				    fpu_cov_top.a2stg_fadd,
				    fpu_cov_top.a2stg_shr_cnt
				};
    // a2stg_fadd       fpu_cov_top.a2stg_fadd;
    // a2stg_shr_cnt    fpu_cov_top.a2stg_shr_cnt;	
}

bind fpu_add_nshift_cov_port fpu_add_nshift_cov_sample_bind2 {
    fpu_add_nshift_state	{
				    fpu_cov_top.a4stg_fadd,
				    fpu_cov_top.a4stg_shl_cnt
				};
    // a4stg_fadd       fpu_cov_top.a4stg_fadd;
    // a4stg_shl_cnt    fpu_cov_top.a4stg_shl_cnt;	
}

bind fpu_add_stickya_cov_port fpu_add_stickya_cov_sample_bind3 {
    fpu_add_stickya_state	{
				    fpu_cov_top.a2stg_shr,
                                    fpu_cov_top.a2stg_fadd
				};
    // a2stg_fadd       fpu_cov_top.a2stg_fadd;
    // a2stg_shr        fpu_cov_top.a2stg_shr;	
}

bind fpu_add_stickyb_cov_port fpu_add_stickyb_cov_sample_bind4 {
    fpu_add_stickyb_state	{
				    fpu_cov_top.a2stg_shr_tmp4,
                                    fpu_cov_top.a2stg_fadd
				};
    // a2stg_fadd       fpu_cov_top.a2stg_fadd;
    // a2stg_shr_tmp4   fpu_cov_top.a2stg_shr_tmp4;	
}

//bind fpu_add_stickyc_cov_port fpu_add_stickyc_cov_sample_bind5 {
//    fpu_ADD_STICKYC_state	{
//				    fpu_cov_top.a2stg_shr,
	//			    fpu_cov_top.a2stg_shr_tmp4,
      //                              fpu_cov_top.a2stg_fadd
	//			};
    // a2stg_fadd       fpu_cov_top.a2stg_fadd;
    // a2stg_shr        fpu_cov_top.a2stg_shr;	
    // a2stg_shr_tmp4   fpu_cov_top.a2stg_shr_tmp4;	
//}

bind fpu_input_queue_cov_port fpu_input_queue_cov_sample_bind6 {
    fpu_input_queue_state	{
				    fpu_cov_top.inq_rdptr,
				    fpu_cov_top.inq_wrptr
				};
    // inq_rdptr        fpu_cov_top.inq_rdptr;
    // inq_wrptr        fpu_cov_top.inq_wrptr;	
}

bind fpu_fdiv_input_queue_cov_port fpu_fdiv_input_queue_cov_sample_bind16 {
     fpu_fdiv_input_queue_state	{
				    fpu_cov_top.inq_div_rdptr,
				    fpu_cov_top.inq_div_wrptr
				};
}

bind fpu_mul_lsticky_cov_port fpu_mul_lsticky_cov_sample_bind7 {
    fpu_mul_lsticky_state	{
				    fpu_cov_top.m4stg_fmul,
				    fpu_cov_top.m4stg_shl
				};
    // m4stg_shl        fpu_cov_top.m4stg_shl;
    // m4stg_fmul       fpu_cov_top.m4stg_fmul;
}

bind fpu_mul_rsticky_cov_port fpu_mul_rsticky_cov_sample_bind8 {
    fpu_mul_rsticky_state	{
				    fpu_cov_top.m4stg_fmul,
				    fpu_cov_top.m4stg_shr
				};
    // m4stg_shr        fpu_cov_top.m4stg_shr;
    // m4stg_fmul       fpu_cov_top.m4stg_fmul;
}

bind fpu_fadd_ieee_flags_cov_port fpu_fadd_ieee_flags_cov_sample_bind9 {
    fpu_valid_state	{
			    fpu_cov_top.a6stg_fadd,
			    fpu_cov_top.add_exc_out
			};
    // add_exc_out      fpu_cov_top.add_exc_out;
    // a6stg_fadd       fpu_cov_top.a6stg_fadd;
}
bind fpu_fmul_ieee_flags_cov_port fpu_fmul_ieee_flags_cov_sample_bind10 {
    fpu_valid_state	{
			    fpu_cov_top.m6stg_fmul,
			    fpu_cov_top.mul_exc_out
			};
    // mul_exc_out      fpu_cov_top.mul_exc_out;
    // m6stg_fmul       fpu_cov_top.m6stg_fmul;
}
bind fpu_fdiv_ieee_flags_cov_port fpu_fdiv_ieee_flags_cov_sample_bind11 {
    fpu_valid_state	{
			    fpu_cov_top.d8stg_fdiv,
			    fpu_cov_top.div_exc_out
			};
    // div_exc_out      fpu_cov_top.div_exc_out;
    // d6stg_fdiv       fpu_cov_top.d6stg_fdiv;
}

bind fpu_fdiv_sticky_cov_port fpu_fdiv_sticky_cov_sample_bind12 {
    fpu_fdiv_sticky_state	{
				    fpu_cov_top.d6stg_fdiv,
				    fpu_cov_top.d6stg_frac_0,
				    fpu_cov_top.d6stg_frac_29,
				    fpu_cov_top.div_frac_add_in1
				};
    // div_frac_add_in1 fpu_cov_top.div_frac_add_in1;
    // d6stg_frac_0     fpu_cov_top.d6stg_frac_0;
    // d6stg_frac_29    fpu_cov_top.d6stg_frac_29;
}

bind fpu_fdiv_norm_cov_port fpu_fdiv_norm_cov_sample_bind13 {
    fpu_valid_state	{
			    fpu_cov_top.d4stg_fdiv,
			    fpu_cov_top.div_shl_cnt
			};
    // div_shl_cnt      fpu_cov_top.div_shl_cnt;
}

bind fpu_add_inc_exp_cov_port fpu_add_inc_exp_cov_sample_bind14 {
    fpu_valid_state	{
			    fpu_cov_top.a4stg_fadd,
			    fpu_cov_top.a4stg_rndadd_cout,
			    fpu_cov_top.add_exp_out_expinc,
			    fpu_cov_top.add_exp_out_exp,
			    fpu_cov_top.add_exp_out_exp1,
			    fpu_cov_top.add_exp_out_expadd
			};
    // a4stg_fadd         fpu_cov_top.a4stg_fadd;
    // a4stg_rndadd_cout  fpu_cov_top.a4stg_rndadd_cout ;
    // add_exp_out_expinc fpu_cov_top.add_exp_out_expinc;
    // add_exp_out_exp    fpu_cov_top.add_exp_out_exp   ;
    // add_exp_out_exp1   fpu_cov_top.add_exp_out_exp1  ;
    // add_exp_out_expadd fpu_cov_top.add_exp_out_expadd;
}

bind fpu_mul_inc_exp_cov_port fpu_mul_inc_exp_cov_sample_bind15 {
    fpu_valid_state	{
			    fpu_cov_top.m4stg_fmul,
			    fpu_cov_top.m5stg_fracadd_cout,
			    fpu_cov_top.mul_exp_out_exp_plus1,
			    fpu_cov_top.m4stg_inc_exp_54,
			    fpu_cov_top.m4stg_inc_exp_55,
			    fpu_cov_top.m4stg_inc_exp_105
			};
    // m4stg_fmul         fpu_cov_top.m4stg_fmul;
    // m5stg_fracadd_cout    fpu_cov_top.m5stg_fracadd_cout;    
    // mul_exp_out_exp_plus1 fpu_cov_top.mul_exp_out_exp_plus1; 
    // m4stg_inc_exp_54      fpu_cov_top.m4stg_inc_exp_54;      
    // m4stg_inc_exp_55      fpu_cov_top.m4stg_inc_exp_55;     
    // m4stg_inc_exp_105     fpu_cov_top.m4stg_inc_exp_105;    
}

#endif

