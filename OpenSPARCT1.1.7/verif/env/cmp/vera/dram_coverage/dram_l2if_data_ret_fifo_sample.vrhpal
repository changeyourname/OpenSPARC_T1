// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: dram_l2if_data_ret_fifo_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
// ***************************************************************************
//
// File:	dram_l2if_data_ret_fifo_sample.vrh
// Description:
// Coverage object for the fifo that keeps track of returned data.
// Some line of this was not hit in the line-coverage, so it may be difficult
// to hit. 
//
// ***************************************************************************


// coverage_def dram_l2if_data_ret_fifo_sample (bit [7:0] fifo_en)
// {
// The states should be sufficient enogh as we are trying to see if each 
// enable is hit
     wildcard state s_dtret_fifo_en0_0             (8'bxxxxxxx0);
     wildcard state s_dtret_fifo_en0_1             (8'bxxxxxxx1);
     wildcard state s_dtret_fifo_en1_0             (8'bxxxxxx0x);
     wildcard state s_dtret_fifo_en1_1             (8'bxxxxxx1x);
     wildcard state s_dtret_fifo_en2_0             (8'bxxxxx0xx);
     wildcard state s_dtret_fifo_en2_1             (8'bxxxxx1xx);
     wildcard state s_dtret_fifo_en3_0             (8'bxxxx0xxx);
     wildcard state s_dtret_fifo_en3_1             (8'bxxxx1xxx);
     wildcard state s_dtret_fifo_en4_0             (8'bxxx0xxxx);
     wildcard state s_dtret_fifo_en4_1             (8'bxxx1xxxx);
     wildcard state s_dtret_fifo_en5_0             (8'bxx0xxxxx);
     wildcard state s_dtret_fifo_en5_1             (8'bxx1xxxxx);
     wildcard state s_dtret_fifo_en6_0             (8'bx0xxxxxx);
     wildcard state s_dtret_fifo_en6_1             (8'bx1xxxxxx);
     wildcard state s_dtret_fifo_en7_0             (8'b0xxxxxxx);
     wildcard state s_dtret_fifo_en7_1             (8'b1xxxxxxx);

     state s_dtret_fifo_en0_count0        	   (8'b11111111);
     state s_dtret_fifo_en0_count1        	   (8'b01111111);
     state s_dtret_fifo_en0_count2        	   (8'b00111111);
     state s_dtret_fifo_en0_count3        	   (8'b00011111);
     state s_dtret_fifo_en0_count4        	   (8'b00001111);
     state s_dtret_fifo_en0_count5        	   (8'b00000111);
     state s_dtret_fifo_en0_count6        	   (8'b00000011);
     state s_dtret_fifo_en0_count7        	   (8'b00000001);
     state s_dtret_fifo_en0_count8        	   (8'b00000000);

  // transitions(to same)

  // transitions(to different)


  // bad states
  //bad_state s_not_WR_Q_STATE (not state);

  // bad transitions 
  //bad_trans t_not_WR_Q_TRANS (not trans);

// }
