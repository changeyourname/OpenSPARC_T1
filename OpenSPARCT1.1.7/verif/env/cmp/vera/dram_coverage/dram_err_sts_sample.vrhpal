// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: dram_err_sts_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
// ***************************************************************************
//
// File:        dram_err_sts_sample.vrh
// Description:
// Coverage object for error status and error status enable registers.
//
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_scrb_val_d2,
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_secc_err,
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_mecc_err_partial,
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_pa_err,
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_err_sts_reg,
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en6, // MU
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en5, // MC
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en4, // SC
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en3, // SUC
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en2, // Scrb C
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en1, // Scrb U
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en0, // ecc syndrone
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en , // oob
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_addr_reg_en, // scrub address correc
//                  dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_secc_loc_en      // first SECC bad nib.
//  
//
// ***************************************************************************


// coverage_def dram_err_sts_sample (bit [?:0] err_en_n_sts)
// {

  // state declarations
       wildcard state s_secc_0		(21'b010x_x00x0xx_0010001_x_0_1); // first secc error, sync/loc
       wildcard state s_secc_1		(21'bxxxx_x01x0xx_xx0xxx0_x_x_0); // after first secc
       wildcard state s_secc_2		(21'b010x_x01x0xx_0100000_0_0_0); // second secc error, 
       wildcard state s_secc_3		(21'bxxxx_x11x0xx_x00xxx0_x_0_0); // after second secc error
       wildcard state s_secc_4		(21'b010x_x11x0xx_0100000_0_0_0); // third+ secc error
       //wildcard state s_secc_5	(21'bxxxx_x11x0xx_x00xxx0_x_0_0); // after third+ secc error (same as 2nd)
       wildcard state s_scrb_secc_0	(21'b110x_x00x0xx_0000101_0_1_1); // first scrb secc error synd/addr/loc
       wildcard state s_scrb_secc_1	(21'bxxxx_x00x1xx_xx0x0x0_x_0_x); // after first scrb secc error synd/addr
       wildcard state s_scrb_secc_2	(21'b110x_x00x1xx_0100000_0_0_0); // second scrb secc error
       wildcard state s_scrb_secc_3	(21'bxxxx_x10x1xx_xxxx0x0_x_0_x); // after second scrb secc error
       wildcard state s_scrb_secc_4	(21'b110x_x10x1xx_0100000_0_0_0); // third+ scrb secc error
       //wildcard state s_scrb_secc_5	(21'bxxxx_x10x1xx_xxxx0x0_x_0_x); // after third+ scrb secc error (same as 2nd)
       wildcard state s_pa_err_0	(21'bxxx1_xxxxxx0_xxxxxx0_1_0_0); // pa_err case
       wildcard state s_pa_err_1	(21'bxxx0_xxxxxx1_xxxxxx0_x_0_0); // pa_err case after first pa_err
       wildcard state s_mecc_0		(21'b0010_0xx0x0x_0xx1x01_0_0_0); // first mecc error
       wildcard state s_mecc_1		(21'bxxxx_0xx1x0x_0xx0x0x_x_x_x); // after first mecc
       wildcard state s_mecc_2		(21'b0010_0xx1x0x_1xx0x00_0_0_0); // 2nd mecc error
       wildcard state s_mecc_3		(21'bxxxx_1xx1x0x_0xx0x0x_x_x_x); // after 2nd mecc
       wildcard state s_mecc_4		(21'b0010_1xx1x0x_1xx0x00_0_0_0); // 3rd mecc error
       wildcard state s_scrb_mecc_0	(21'b1010_0xx0x0x_0000011_0_1_0); // first scrb mecc error synd/addr 
       wildcard state s_scrb_mecc_1	(21'bxxxx_0xx0x1x_xxxxx0x_x_0_x); // after first scrb mecc error 
       wildcard state s_scrb_mecc_2	(21'b1010_0xx0x1x_1000000_0_0_0); // 2nd  scrb mecc error 
       wildcard state s_scrb_mecc_3	(21'bxxxx_1xx0x1x_0xxxxxx_x_x_x); // after 2nd  scrb mecc error 
       wildcard state s_scrb_mecc_4	(21'b1010_1xx0x1x_1000000_0_0_0); // 3rd  scrb mecc error 

       // secc and scrb secc
       wildcard state s_secc_5		(21'b110x_x01x0xx_x10x1x0_x_1_0); // secc -> scrb-secc
       wildcard state s_secc_6		(21'bxxxx_x11x1xx_xx0xxx0_x_0_0); // after secc -> scrb-secc
       wildcard state s_secc_7		(21'b110x_x11x1xx_x10xxx0_x_0_0); // secc -> scrb-secc -> scrb-secc
       wildcard state s_secc_8		(21'b010x_x11x1xx_x10xxx0_x_0_0); // secc -> scrb-secc -> secc
    
       // scrb secc and secc
       wildcard state s_scrb_secc_5	(21'b010x_x00x1xx_x11x0x0_x_0_0); // scrb-secc -> secc

       // mecc and scrb mecc
       wildcard state s_mecc_5          (21'b1010_0xx1x0x_1xx0x10_x_1_0); // mecc -> scrb-mecc
       wildcard state s_mecc_6          (21'bxxxx_1xx1x0x_xxx0x00_x_x_x); // after mecc -> scrb-mecc
       wildcard state s_mecc_7          (21'b1010_1xx1x1x_1xx0x00_x_0_0); // mecc -> scrb-mecc -> scrb-mecc
       wildcard state s_mecc_8          (21'b0010_1xx1x0x_1xx0x00_x_0_0); // mecc -> scrb-mecc -> mecc

       wildcard state s_scrb_mecc_5	(21'b0010_0xx0x1x_1001000_x_0_0); // scrb-mecc -> mecc

       wildcard state s_scrb_mecc_0_not_bad_2   (21'b1010_0xx0x0x_xxxxxx1_x_1_x); // first scrb mecc error synd/addr
       wildcard state s_mecc_0_not_bad_3        (21'b0010_0xx0x0x_xxxxxx1_x_x_x); // first mecc error, synd en

       // Combinations - Transitions
       // SECC error when no other errors are present, the loc and ecc mask is updated 
       wildcard trans t_secc_0  	(21'b010x_x00x0xx_0010001_x_0_1 -> 21'bxxxx_x01x0xx_xxxxxx0_x_x_0);
       // 2nd SECC error, only the M C E bit is updated, not the loc/syndr
       wildcard trans t_secc_1  	(21'b010x_x01x0xx_0100000_0_0_0 -> 21'bxxxx_x11x0xx_0x00000_x_x_0);
       // secc to scrb secc
       wildcard trans t_secc_2  	(21'b110x_x01x0xx_0100100_0_1_0 -> 21'bxxxx_x11x1xx_0xx0000_x_0_0);
       // Multiple correctable error, and secc
       wildcard trans t_secc_3  	(21'bx10x_x11xxxx_0100000_0_x_0 -> 21'bxxxx_x11xxxx_0x0x000_x_x_0);
       // none and scrb secc
       wildcard trans t_scrb_secc_0	(21'b110x_x00x0xx_0000101_0_1_1 -> 21'bxxxx_x00x1xx_xxxx0x0_0_0_0);
       // scrub  secc & scrb secc
       wildcard trans t_scrb_secc_1	(21'b110x_x00x1xx_0100000_0_0_0 -> 21'bxxxx_x10x1xx_xxxx000_0_0_0);
       // scrub  secc & secc
       wildcard trans t_scrb_secc_2	(21'b010x_x00x1xx_0110000_0_0_0 -> 21'bxxxx_x11x1xx_xxxx000_0_0_0);

       // pa_err and pa_err bit asserted
       wildcard trans t_pa_err_0	(21'bxxx1_xxxxxx0_xxxxxxx_1_x_x -> 21'bxxxx_xxxxxx1_xxxxxxx_x_x_x);
       wildcard trans t_pa_err_1	(21'bxxx1_xxxxxx1_xxxxxxx_1_x_x -> 21'bxxxx_xxxxxx1_xxxxxxx_0_x_x);

       // MECC none -> mecc
       wildcard trans t_mecc_0          (21'b0010_0xx0x0x_0xx1x01_0_0_0 -> 21'bxxxx_0xx1x0x_xxxxxxx_x_x_x);
       // mecc -> mecc
       wildcard trans t_mecc_1          (21'b0010_0xx1x0x_1xx0x00_0_0_0 -> 21'bxxxx_1xx1x0x_xxxxxxx_x_x_x);
       // mecc -> scrb mecc
       wildcard trans t_mecc_2          (21'b1010_0xx1x0x_1xx0x10_0_1_0 -> 21'bxxxx_1xx1x1x_xxxxxxx_x_x_x);
       // none -> scrb mecc
       wildcard trans t_scrb_mecc_0     (21'b1010_0xx0x0x_0xx0x11_0_1_0 -> 21'bxxxx_0xx0x1x_xxxxxxx_x_x_x);
       // scrb mecc -> scrb mecc
       wildcard trans t_scrb_mecc_1     (21'b1010_0xx0x1x_1xx0xx0_0_0_0 -> 21'bxxxx_1xx0x1x_xxxxxxx_x_x_x);
       // scrb mecc -> mecc
       wildcard trans t_scrb_mecc_2     (21'b0010_0xx0x1x_1xx1xx0_0_0_0 -> 21'bxxxx_1xx1x1x_xxxxxxx_x_x_x);

       // syndrome is updated for a mecc error too. ( so even if mecc error syndrome will freeze )
       // mecc -> secc
       wildcard trans t_scrb_mecc_3     (21'b0100_000100x_001xxx0_0_0_1 -> 21'bxxxx_0011x0x_xxxxxx0_x_x_0);
       // scrb mecc -> secc
       wildcard trans t_scrb_mecc_4     (21'b0100_000001x_001xxx0_0_0_1 -> 21'bxxxx_0010x1x_xxxxxx0_x_x_0);
       // mecc -> scrb secc
       wildcard trans t_scrb_mecc_5     (21'b1100_000100x_000x1x0_0_1_1 -> 21'bxxxx_000110x_xxxxxx0_x_0_x);
       // scrb mecc -> scrb secc
       wildcard trans t_scrb_mecc_6     (21'b1100_000001x_000x1x0_0_0_1 -> 21'bxxxx_000011x_xxxxxx0_x_0_x);

       // to check if the syndromes are updated and add bad states for these 4
       // scrub  secc & scrb mecc
       wildcard trans t_scrb_secc_3      (21'b1010_000010x_0000011_0_0_0 -> 21'bxxxx_000011x_xxxx000_0_0_0);
       // secc & scrb mecc
       wildcard trans t_scrb_secc_4      (21'b1010_001000x_0000011_0_1_0 -> 21'bxxxx_001001x_xxxx000_0_0_0);
       // scrub  secc & mecc
       wildcard trans t_scrb_secc_5      (21'b0010_000010x_0001001_0_0_0 -> 21'bxxxx_000110x_xxxx000_0_0_0);
       // secc & mecc
       wildcard trans t_scrb_secc_6      (21'b0010_001000x_0001001_0_0_0 -> 21'bxxxx_001100x_xxxx000_0_0_0);



  // bad states

       wildcard bad_state s_secc_bad_0          (21'b010x_x00x0xx_xx0xxxx_x_x_x); // first secc error, no secc en
       wildcard bad_state s_secc_bad_1          (21'b010x_000000x_xxxxxx0_x_x_x); // first secc error, no synd en
       wildcard bad_state s_secc_bad_2          (21'b010x_x00x0xx_xxxxxxx_x_x_0); // first secc error, no loc en
       wildcard bad_state s_secc_2_bad_0        (21'b010x_x01x0xx_x0xxxxx_x_x_x); // second secc error , no mul secc en
       wildcard bad_state s_secc_2_bad_1        (21'b010x_x01x0xx_x01xxxx_x_x_x); // second secc error , secc en
       wildcard bad_state s_secc_2_bad_2        (21'b010x_x01x0xx_xxxxxx1_x_x_x); // second secc error , synd en
       wildcard bad_state s_secc_2_bad_3        (21'b010x_x01x0xx_xxxxxxx_x_1_x); // second secc error , scrb ad en
       wildcard bad_state s_secc_2_bad_4        (21'b010x_x01x0xx_xxxxxxx_x_x_1); // second secc error , loc en
       wildcard bad_state s_secc_4_bad_0        (21'b010x_x11x0xx_xxxxxx1_0_0_0); // third+ secc error, synd en
       wildcard bad_state s_secc_4_bad_1        (21'b010x_x11x0xx_xxxxxxx_x_x_1); // third+ secc error, loc en
       wildcard bad_state s_secc_4_bad_2        (21'b010x_x11x0xx_xxxxxxx_x_1_x); // third+ secc error, scrb addr en
       wildcard bad_state s_scrb_secc_0_bad_0   (21'b110x_x00x00x_xxxx0xx_x_x_x); // first scrb secc err,no scb en
       wildcard bad_state s_scrb_secc_0_bad_1   (21'b110x_x00000x_xxxxxx0_x_x_x); // first scrb secc err, no synd en
       wildcard bad_state s_scrb_secc_0_bad_2   (21'b110x_000x00x_xxxxxxx_x_0_x); // first scrb secc err, no addr en
       wildcard bad_state s_scrb_secc_0_bad_3   (21'b110x_000x00x_xxxxxxx_x_x_0); // first scrb secc err, no loc en
       wildcard bad_state s_scrb_secc_2_bad_0   (21'b110x_x00x1xx_xxxxxxx_x_x_1); // second scrb secc error, loc en
       wildcard bad_state s_scrb_secc_2_bad_1   (21'b110x_x00x1xx_xxxxxxx_x_1_x); // second scrb secc error, addr en
       wildcard bad_state s_scrb_secc_2_bad_2   (21'b110x_x00x1xx_xxxxxx1_x_x_x); // second scrb secc error, synd en
       wildcard bad_state s_scrb_secc_2_bad_3   (21'b110x_x00x1xx_x0xxxxx_x_x_x); // second scrb secc error, m secc not en
       wildcard bad_state s_scrb_secc_4_bad_0   (21'b110x_x10x1xx_xxxxxx1_x_x_x); // third+ scrb secc error, synd en
       wildcard bad_state s_scrb_secc_4_bad_1   (21'b110x_x10x1xx_xxxxxxx_x_x_1); // third+ scrb secc error, loc en
       wildcard bad_state s_scrb_secc_4_bad_2   (21'b110x_x10x1xx_xxxxxxx_x_1_x); // third+ scrb secc error, addr en
       wildcard bad_state s_pa_err_0_bad_0      (21'bxxx1_xxxxxx0_xxxxxxx_0_x_x); // pa_err case, pa not en
       wildcard bad_state s_pa_err_0_bad_1      (21'bxxx1_xxxxxx0_xxxxxxx_x_x_1); // pa_err case, loc en
       wildcard bad_state s_pa_err_0_bad_2      (21'bxxx1_xxxxxx0_xxxxxxx_x_1_x); // pa_err case, addr en
       wildcard bad_state s_pa_err_0_bad_3      (21'bxxx1_xxxxxx0_xxxxxx1_x_x_x); // pa_err case, synd en
       wildcard bad_state s_mecc_0_bad_0        (21'b0010_0xx0x0x_0xx0x0x_x_x_x); // first mecc error, mecc not en
       wildcard bad_state s_mecc_0_bad_1        (21'b0010_0xx0x0x_xxxxxxx_x_x_1); // first mecc error, loc en
       wildcard bad_state s_mecc_2_bad_0        (21'b0010_0xx1x0x_0xxxxxx_x_x_x); // 2nd mecc error
       wildcard bad_state s_mecc_2_bad_1        (21'b0010_0xx1x0x_xxxxxx1_x_x_x); // 2nd mecc error
       wildcard bad_state s_mecc_2_bad_2        (21'b0010_0xx1x0x_xxxxxxx_x_1_x); // 2nd mecc error
       wildcard bad_state s_mecc_4_bad_0        (21'b0010_1xx1x0x_xxxxxxx_x_x_1); // 3rd mecc error
       wildcard bad_state s_mecc_4_bad_1        (21'b0010_1xx1x0x_xxxxxxx_x_1_x); // 3rd mecc error
       wildcard bad_state s_mecc_4_bad_2        (21'b0010_1xx1x0x_xxxxxx1_x_x_x); // 3rd mecc error
       wildcard bad_state s_scrb_mecc_0_bad_0   (21'b1010_0xx000x_xxxxx0x_x_x_x); // first scrb mecc error synd/addr
       wildcard bad_state s_scrb_mecc_0_bad_1   (21'b1010_0xx000x_xxxxxxx_x_0_x); // first scrb mecc error synd/addr
       wildcard bad_state s_scrb_mecc_0_bad_3   (21'b1010_0xx000x_xxxxxxx_x_x_1); // first scrb mecc error synd/addr
       wildcard bad_state s_scrb_mecc_2_bad_0   (21'b1010_0xx0x1x_0000000_x_x_x); // 2nd  scrb mecc error
       wildcard bad_state s_scrb_mecc_2_bad_1   (21'b1010_0xx0x1x_xxxxxxx_x_x_1); // 2nd  scrb mecc error
       wildcard bad_state s_scrb_mecc_2_bad_2   (21'b1010_0xx0x1x_xxxxxxx_x_1_x); // 2nd  scrb mecc error
       wildcard bad_state s_scrb_mecc_2_bad_3   (21'b1010_0xx0x1x_xxxxxx1_x_x_x); // 2nd  scrb mecc error
       wildcard bad_state s_scrb_mecc_4_bad_0   (21'b1010_1xx0x1x_xxxxxx1_x_x_x); // 3rd  scrb mecc error
       wildcard bad_state s_scrb_mecc_4_bad_1   (21'b1010_1xx0x1x_xxxxxxx_x_1_x); // 3rd  scrb mecc error
       wildcard bad_state s_scrb_mecc_4_bad_2   (21'b1010_1xx0x1x_xxxxxxx_x_x_1); // 3rd  scrb mecc error
       wildcard bad_state s_secc_5_bad_0        (21'b110x_001x00x_xxxxxxx_x_0_x); // secc -> scrb-secc
       wildcard bad_state s_secc_5_bad_1        (21'b110x_x01x0xx_x0xxxxx_x_x_x); // secc -> scrb-secc
       wildcard bad_state s_secc_5_bad_2        (21'b110x_x01x0xx_xxxxxxx_x_x_1); // secc -> scrb-sDECC
       wildcard bad_state s_secc_7_bad_0        (21'b110x_x11x1xx_xxxxxx1_x_x_x); // secc -> scrb-secc -> scrb-secc
       wildcard bad_state s_secc_7_bad_1        (21'b110x_x11x1xx_xxxxxxx_x_x_1); // secc -> scrb-secc -> scrb-secc
       wildcard bad_state s_secc_7_bad_2        (21'b110x_x11x1xx_xxxxxxx_x_1_x); // secc -> scrb-secc -> scrb-secc
       wildcard bad_state s_secc_8_bad_0        (21'b010x_x11x1xx_xxxxxx1_x_x_x); // secc -> scrb-secc -> secc
       wildcard bad_state s_secc_8_bad_1        (21'b010x_x11x1xx_xxxxxxx_x_x_1); // secc -> scrb-secc -> secc
       wildcard bad_state s_secc_8_bad_2        (21'b010x_x11x1xx_xxxxxxx_x_1_x); // secc -> scrb-secc -> secc
       wildcard bad_state s_scrb_secc_5_bad_0   (21'b010x_x00x1xx_x0xxxxx_x_x_x); // scrb-secc -> secc
       wildcard bad_state s_scrb_secc_5_bad_1   (21'b010x_x00x1xx_xx0xxxx_x_x_x); // scrb-secc -> secc
       wildcard bad_state s_scrb_secc_5_bad_2   (21'b010x_x00x1xx_xxxxxxx_x_x_1); // scrb-secc -> secc
       wildcard bad_state s_scrb_secc_5_bad_3   (21'b010x_x00x1xx_xxxxxxx_x_1_x); // scrb-secc -> secc
       wildcard bad_state s_scrb_secc_5_bad_4   (21'b010x_x00x1xx_xxxxxx1_x_x_x); // scrb-secc -> secc
       wildcard bad_state s_mecc_5_bad_0        (21'b1010_0xx1x0x_0xxxxxx_x_x_x); // mecc -> scrb-mecc
       wildcard bad_state s_mecc_5_bad_1        (21'b1010_0xx1x0x_xxxxxxx_x_x_1); // mecc -> scrb-mecc
       wildcard bad_state s_mecc_5_bad_2        (21'b1010_0xx1x0x_xxxxxx1_x_x_x); // mecc -> scrb-mecc
       wildcard bad_state s_mecc_5_bad_3        (21'b1010_0xx110x_xxxxxxx_x_1_x); // mecc -> scrb-mecc
       wildcard bad_state s_mecc_7_bad_0        (21'b1010_1xx1x1x_0xx0x00_x_0_0); // mecc -> scrb-mecc -> scrb-mecc
       wildcard bad_state s_mecc_7_bad_1        (21'b1010_1xx1x1x_xxxxxx1_x_x_x); // mecc -> scrb-mecc -> scrb-mecc
       wildcard bad_state s_mecc_7_bad_2        (21'b1010_1xx1x1x_xxxxxxx_x_1_x); // mecc -> scrb-mecc -> scrb-mecc
       wildcard bad_state s_mecc_7_bad_3        (21'b1010_1xx1x1x_xxxxxxx_x_x_1); // mecc -> scrb-mecc -> scrb-mecc
       wildcard bad_state s_mecc_8_bad_0        (21'b0010_1xx1x1x_xxxxxxx_x_x_1); // mecc -> scrb-mecc -> mecc
       wildcard bad_state s_mecc_8_bad_1        (21'b0010_1xx1x1x_xxxxxxx_x_1_x); // mecc -> scrb-mecc -> mecc
       wildcard bad_state s_mecc_8_bad_2        (21'b0010_1xx1x1x_xxxxxx1_x_x_x); // mecc -> scrb-mecc -> mecc
       wildcard bad_state s_scrb_mecc_5_bad_0   (21'b0010_0xx0x1x_xxxxxxx_x_x_1); // scrb-mecc -> mecc
       wildcard bad_state s_scrb_mecc_5_bad_1   (21'b0010_0xx0x1x_xxxxxxx_x_1_x); // scrb-mecc -> mecc
       wildcard bad_state s_scrb_mecc_5_bad_2   (21'b0010_0xx0x1x_xxxxxx1_x_x_x); // scrb-mecc -> mecc

       wildcard bad_state s_secc_bad_syn       (21'bx10x_x00000x_xxxxxx0_x_x_x); // first secc error, no synd en
       wildcard bad_state s_secc_bad_loc       (21'bx10x_x00000x_xxxxxxx_x_x_0); // first secc error, no loc en
       wildcard bad_state s_scbr_secc_bad_addr (21'b110x_000000x_xxxxxxx_x_0_x); // first scrb secc error, no addr en
       wildcard bad_state s_scbr_mecc_bad_addr (21'b101x_000000x_xxxxxxx_x_0_x); // first scrb secc error, no addr en

  // bad transitions
       // bad trans , secc error and err_sts not updated
       wildcard bad_trans t_secc_0_bad_0  (21'b010x_x00x0xx_0010001_0_0_1 -> 21'bxxxx_x00x0xx_xxxxxxx_x_x_x);
       // bad_trans  ecc syndrone update doesnt goes down ( SECC followed by MECC, syndrome updated.
       wildcard bad_trans t_secc_0_bad_1  (21'b010x_x00x0xx_0010001_0_0_1 -> 21'bxxxx_xxxxxxx_xxx0xx1_x_x_x);
       // bad_trans  location update doesnt goes down
       wildcard bad_trans t_secc_0_bad_2  (21'b010x_x00x0xx_0010001_0_0_1 -> 21'bxxxx_xxxxxxx_xxxxxxx_x_x_1);

       // 2nd SECC error, the M C E bit is not updated,
       wildcard bad_trans t_secc_1_bad_0  	(21'b010x_001000x_0100000_0_0_0 -> 21'bxxxx_001000x_0x00000_x_x_0);

       // pa_err and pa_err bit not asserted
       wildcard bad_trans t_pa_err_0_bad_0	(21'bxxx1_xxxxxx0_xxxxxxx_1_x_x -> 21'bxxxx_xxxxxx0_xxxxxxx_x_x_x);

       // scrub and secc and scrb secc not coming
       wildcard bad_trans t_scrb_secc_0_bad_0	(21'b110x_x00x0xx_0000101_0_1_0 -> 21'bxxxx_x00x0xx_xxxxxxx_x_x_x);
       // scrb address update doesnt goes off
       wildcard bad_trans t_scrb_secc_0_bad_1	(21'b110x_x00x0xx_0000101_0_1_0 -> 21'bxxxx_xxxxx0x_xxxxxxx_x_1_x);
       // scrb nibble update doesnt goes off
       wildcard bad_trans t_scrb_secc_0_bad_2	(21'b110x_x00x0xx_0000101_0_1_0 -> 21'bxxxx_xxx0x0x_xxxxxx1_x_x_x);
       // scb secc and address updated
       wildcard bad_trans t_scrb_secc_0_bad_3	(21'bxxxx_xxxx11x_xxxxxxx_x_0_x -> 21'bxxxx_xxxx11x_xxxxxxx_x_1_x);
       wildcard bad_trans t_scrb_secc_0_bad_4	(21'bxxxx_xx1111x_xxxxxx0_x_x_x -> 21'bxxxx_xx1111x_xxxxxx1_x_x_x);
       wildcard bad_trans t_scrb_secc_0_bad_5	(21'bxxxx_xx1x1xx_xxxxxxx_x_x_0 -> 21'bxxxx_xx1x1xx_xxxxxxx_x_x_1);

       // MECC none -> mecc
       wildcard bad_trans t_mecc_0_bad_0          (21'b0010_0xx0x0x_0xx1x01_0_0_0 -> 21'bxxxx_0xx0x0x_xxxxxxx_x_x_x);
       // mecc -> mecc
       wildcard bad_trans t_mecc_1_bad_0          (21'b0010_0xx1x0x_1xx0x00_0_0_0 -> 21'bxxxx_0xx1x0x_xxxxxxx_x_x_x);
       // mecc -> scrb mecc
       wildcard bad_trans t_mecc_2_bad_0          (21'b1010_0xx1x0x_1xx1x00_0_x_0 -> 21'bxxxx_0xx1x0x_xxxxxxx_x_x_x);
       //wildcard bad_trans t_mecc_2_bad_1          (21'b1010_0xx1x0x_1xx1x00_0_0_0 -> 21'bxxxx_0xx1xxx_xxxxxxx_x_x_x);
       // none -> scrb mecc
       wildcard bad_trans t_scrb_mecc_0_bad_0     (21'b1010_0xx0x0x_0xx0x10_0_0_0 -> 21'bxxxx_0xx0x0x_xxxxxxx_x_x_x);
       // scrb mecc -> scrb mecc
       wildcard bad_trans t_scrb_mecc_1_bad_0     (21'b1010_0xx0x1x_1xx0xx0_0_0_0 -> 21'bxxxx_0xx0x1x_xxxxxxx_x_x_x);
       // scrb mecc -> mecc
       wildcard bad_trans t_scrb_mecc_2_bad_0     (21'b0010_0xx0x1x_1xx0xx0_0_0_0 -> 21'bxxxx_0xxxx1x_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_mecc_2_bad_1     (21'b0010_0xx0x0x_1xx0xx0_0_0_0 -> 21'bxxxx_xxx0xxx_xxxxxxx_x_x_x);


       wildcard bad_trans t_scrb_mecc_3_bad_0     (21'b0100_000100x_011xxx1_0_0_1 -> 21'bxxxx_x0xxxxx_xxxxxx0_x_x_0);
       wildcard bad_trans t_scrb_mecc_4_bad_0     (21'b0100_000001x_011xxx1_0_0_1 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_mecc_5_bad_0     (21'b1100_000100x_010x1x0_0_1_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_mecc_6_bad_0     (21'b1100_000001x_010x1x0_0_1_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_secc_3_bad_0      (21'b1010_000010x_0100010_0_0_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_secc_4_bad_0      (21'b1010_001000x_0100010_0_0_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_secc_5_bad_0      (21'b0010_000010x_0101000_0_0_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);
       wildcard bad_trans t_scrb_secc_6_bad_0      (21'b0010_001000x_0101000_0_0_0 -> 21'bxxxx_x0xxxxx_xxxxxxx_x_x_x);

//}

