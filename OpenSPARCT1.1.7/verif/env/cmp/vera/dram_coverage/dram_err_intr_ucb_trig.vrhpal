// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: dram_err_intr_ucb_trig.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
// ***************************************************************************
//
// File:        dram_err_intr_ucb_trig.vrh
// Description:
// Coverage object for error interrupts ( sampled on JBUS clock)
//
// ***************************************************************************


// coverage_def dram_err_intr_ucb_trig (bit [1:0] err_intr_ucb_trig)
// {

  // state declarations
       wildcard state s_err_intr0_ucb_trig  (2'b0x);
       wildcard state s_err_intr1_ucb_trig  (2'b1x);
       wildcard state s_err_intr_ucb_trig0  (2'bx0);
       wildcard state s_err_intr_ucb_trig1  (2'bx1);

       wildcard trans t_err_intr_0_0_ucb_trig  (2'b0x -> 2'b0x);
       wildcard trans t_err_intr_0_1_ucb_trig  (2'b0x -> 2'b1x);
       wildcard trans t_err_intr_1_0_ucb_trig  (2'b1x -> 2'b0x);
       wildcard trans t_err_intr_ucb_trig_0_0  (2'bx0 -> 2'bx0);
       wildcard trans t_err_intr_ucb_trig_0_1  (2'bx0 -> 2'bx1);
       wildcard trans t_err_intr_ucb_trig_1_0  (2'bx1 -> 2'bx0);


  // bad states
  //bad_state s_not_rd_q_full_n_req_state (not state);

  // bad transitions
  //bad_trans t_not_rd_q_full_n_req_trans (not trans);
       wildcard trans t_err_intr_1_1_ucb_trig  (2'b1x -> 2'b1x);
       wildcard trans t_err_intr_ucb_trig_1_1  (2'bx1 -> 2'bx1);

//}

