// ***************************************************************************
//
// File:	dram_wr_que_sample.vrh
// Description:
// Coverage object for the wr que
//
// ***************************************************************************


// coverage_def dram_wr_que_sample (bit [28:0] status_vector)
// {

  // state declarations
    wildcard state s_WR_REQ_DEASSRT             (WR_REQ_DEASSRT         );
    wildcard state s_WR_REQ_ASSRT               (WR_REQ_ASSRT           );
    wildcard state s_WR_Q_WR_PTR_DEASSRT        (WR_Q_WR_PTR_DEASSRT    );
    wildcard state s_WR_Q_WR_PTR_ASSRT0         (WR_Q_WR_PTR_ASSRT0     );
    wildcard state s_WR_Q_WR_PTR_ASSRT1         (WR_Q_WR_PTR_ASSRT1     );
    wildcard state s_WR_Q_WR_PTR_ASSRT2         (WR_Q_WR_PTR_ASSRT2     );
    wildcard state s_WR_Q_WR_PTR_ASSRT3         (WR_Q_WR_PTR_ASSRT3     );
    wildcard state s_WR_Q_WR_PTR_ASSRT4         (WR_Q_WR_PTR_ASSRT4     );
    wildcard state s_WR_Q_WR_PTR_ASSRT5         (WR_Q_WR_PTR_ASSRT5     );
    wildcard state s_WR_Q_WR_PTR_ASSRT6         (WR_Q_WR_PTR_ASSRT6     );
    wildcard state s_WR_Q_WR_PTR_ASSRT7         (WR_Q_WR_PTR_ASSRT7     );
    wildcard state s_WR_Q_RD_PTR_DEASSRT        (WR_Q_RD_PTR_DEASSRT    );
    wildcard state s_WR_Q_RD_PTR_ASSRT0         (WR_Q_RD_PTR_ASSRT0     );
    wildcard state s_WR_Q_RD_PTR_ASSRT1         (WR_Q_RD_PTR_ASSRT1     );
    wildcard state s_WR_Q_RD_PTR_ASSRT2         (WR_Q_RD_PTR_ASSRT2     );
    wildcard state s_WR_Q_RD_PTR_ASSRT3         (WR_Q_RD_PTR_ASSRT3     );
    wildcard state s_WR_Q_RD_PTR_ASSRT4         (WR_Q_RD_PTR_ASSRT4     );
    wildcard state s_WR_Q_RD_PTR_ASSRT5         (WR_Q_RD_PTR_ASSRT5     );
    wildcard state s_WR_Q_RD_PTR_ASSRT6         (WR_Q_RD_PTR_ASSRT6     );
    wildcard state s_WR_Q_RD_PTR_ASSRT7         (WR_Q_RD_PTR_ASSRT7     );
    wildcard state s_WR_Q_RD_PTR_ARB_DEASSRT    (WR_Q_RD_PTR_ARB_DEASSRT    );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT0     (WR_Q_RD_PTR_ARB_ASSRT0     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT1     (WR_Q_RD_PTR_ARB_ASSRT1     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT2     (WR_Q_RD_PTR_ARB_ASSRT2     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT3     (WR_Q_RD_PTR_ARB_ASSRT3     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT4     (WR_Q_RD_PTR_ARB_ASSRT4     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT5     (WR_Q_RD_PTR_ARB_ASSRT5     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT6     (WR_Q_RD_PTR_ARB_ASSRT6     );
    wildcard state s_WR_Q_RD_PTR_ARB_ASSRT7     (WR_Q_RD_PTR_ARB_ASSRT7     );
    wildcard state s_WR_Q_CNT0                  (WR_Q_CNT0              );
    wildcard state s_WR_Q_CNT1                  (WR_Q_CNT1              );
    wildcard state s_WR_Q_CNT2                  (WR_Q_CNT2              );
    wildcard state s_WR_Q_CNT3                  (WR_Q_CNT3              );
    wildcard state s_WR_Q_CNT4                  (WR_Q_CNT4              );
    wildcard state s_WR_Q_CNT5                  (WR_Q_CNT5              );
    wildcard state s_WR_Q_CNT6                  (WR_Q_CNT6              );
    wildcard state s_WR_Q_CNT7                  (WR_Q_CNT7              );
    wildcard state s_WR_Q_CNT8                  (WR_Q_CNT8              );
    wildcard state s_WR_Q_NOT_FULL              (WR_Q_NOT_FULL          );
    wildcard state s_WR_Q_FULL                  (WR_Q_FULL              );
    wildcard state s_WR_COLPS_FIFO_CNT0         (WR_COLPS_FIFO_CNT0     );
    wildcard state s_WR_COLPS_FIFO_CNT1         (WR_COLPS_FIFO_CNT1     );
    wildcard state s_WR_COLPS_FIFO_CNT2         (WR_COLPS_FIFO_CNT2     );
    wildcard state s_WR_COLPS_FIFO_CNT3         (WR_COLPS_FIFO_CNT3     );
    wildcard state s_WR_COLPS_FIFO_CNT4         (WR_COLPS_FIFO_CNT4     );
    wildcard state s_WR_COLPS_FIFO_CNT5         (WR_COLPS_FIFO_CNT5     );
    wildcard state s_WR_COLPS_FIFO_CNT6         (WR_COLPS_FIFO_CNT6     );
    wildcard state s_WR_COLPS_FIFO_CNT7         (WR_COLPS_FIFO_CNT7     );
    wildcard state s_WR_COLPS_FIFO_CNT8         (WR_COLPS_FIFO_CNT8     );
    wildcard state s_WR_COLPS_FIFO_NOT_FULL     (WR_COLPS_FIFO_NOT_FULL );
    wildcard state s_WR_COLPS_FIFO_FULL         (WR_COLPS_FIFO_FULL     );
    wildcard state s_WR_Q_NOT_EMPTY             (WR_Q_NOT_EMPTY         );
    wildcard state s_WR_Q_EMPTY                 (WR_Q_EMPTY             );
    wildcard state s_WR_COLPS_FIFO_NOT_EMPTY    (WR_COLPS_FIFO_NOT_EMPTY);
    wildcard state s_WR_COLPS_FIFO_EMPTY        (WR_COLPS_FIFO_EMPTY    );



  // transitions(to same)
  wildcard trans t_s_WR_Q_s_WR_Q       ( [WR_REQ_DEASSRT, WR_REQ_ASSRT, WR_Q_WR_PTR_DEASSRT, WR_Q_WR_PTR_ASSRT0, WR_Q_WR_PTR_ASSRT1, WR_Q_WR_PTR_ASSRT2, WR_Q_WR_PTR_ASSRT3, WR_Q_WR_PTR_ASSRT4, WR_Q_WR_PTR_ASSRT5, WR_Q_WR_PTR_ASSRT6, WR_Q_WR_PTR_ASSRT7, WR_Q_RD_PTR_DEASSRT, WR_Q_RD_PTR_ASSRT0, WR_Q_RD_PTR_ASSRT1, WR_Q_RD_PTR_ASSRT2, WR_Q_RD_PTR_ASSRT3, WR_Q_RD_PTR_ASSRT4, WR_Q_RD_PTR_ASSRT5, WR_Q_RD_PTR_ASSRT6, WR_Q_RD_PTR_ASSRT7, WR_Q_RD_PTR_ARB_DEASSRT, WR_Q_RD_PTR_ARB_ASSRT0, WR_Q_RD_PTR_ARB_ASSRT1, WR_Q_RD_PTR_ARB_ASSRT2, WR_Q_RD_PTR_ARB_ASSRT3, WR_Q_RD_PTR_ARB_ASSRT4, WR_Q_RD_PTR_ARB_ASSRT5, WR_Q_RD_PTR_ARB_ASSRT6, WR_Q_RD_PTR_ARB_ASSRT7, WR_Q_CNT0, WR_Q_CNT1, WR_Q_CNT2, WR_Q_CNT3, WR_Q_CNT4, WR_Q_CNT5, WR_Q_CNT6, WR_Q_CNT7, WR_Q_CNT8, WR_Q_NOT_FULL, WR_Q_FULL, WR_COLPS_FIFO_CNT0, WR_COLPS_FIFO_CNT1, WR_COLPS_FIFO_CNT2, WR_COLPS_FIFO_CNT3, WR_COLPS_FIFO_CNT4, WR_COLPS_FIFO_CNT5, WR_COLPS_FIFO_CNT6, WR_COLPS_FIFO_CNT7, WR_COLPS_FIFO_CNT8, WR_COLPS_FIFO_NOT_FULL, WR_COLPS_FIFO_FULL, WR_Q_NOT_EMPTY, WR_Q_EMPTY, WR_COLPS_FIFO_NOT_EMPTY, WR_COLPS_FIFO_EMPTY] -> [WR_REQ_DEASSRT, WR_REQ_ASSRT, WR_Q_WR_PTR_DEASSRT, WR_Q_WR_PTR_ASSRT0, WR_Q_WR_PTR_ASSRT1, WR_Q_WR_PTR_ASSRT2, WR_Q_WR_PTR_ASSRT3, WR_Q_WR_PTR_ASSRT4, WR_Q_WR_PTR_ASSRT5, WR_Q_WR_PTR_ASSRT6, WR_Q_WR_PTR_ASSRT7, WR_Q_RD_PTR_DEASSRT, WR_Q_RD_PTR_ASSRT0, WR_Q_RD_PTR_ASSRT1, WR_Q_RD_PTR_ASSRT2, WR_Q_RD_PTR_ASSRT3, WR_Q_RD_PTR_ASSRT4, WR_Q_RD_PTR_ASSRT5, WR_Q_RD_PTR_ASSRT6, WR_Q_RD_PTR_ASSRT7, WR_Q_RD_PTR_ARB_DEASSRT, WR_Q_RD_PTR_ARB_ASSRT0, WR_Q_RD_PTR_ARB_ASSRT1, WR_Q_RD_PTR_ARB_ASSRT2, WR_Q_RD_PTR_ARB_ASSRT3, WR_Q_RD_PTR_ARB_ASSRT4, WR_Q_RD_PTR_ARB_ASSRT5, WR_Q_RD_PTR_ARB_ASSRT6, WR_Q_RD_PTR_ARB_ASSRT7, WR_Q_CNT0, WR_Q_CNT1, WR_Q_CNT2, WR_Q_CNT3, WR_Q_CNT4, WR_Q_CNT5, WR_Q_CNT6, WR_Q_CNT7, WR_Q_CNT8, WR_Q_NOT_FULL, WR_Q_FULL, WR_COLPS_FIFO_CNT0, WR_COLPS_FIFO_CNT1, WR_COLPS_FIFO_CNT2, WR_COLPS_FIFO_CNT3, WR_COLPS_FIFO_CNT4, WR_COLPS_FIFO_CNT5, WR_COLPS_FIFO_CNT6, WR_COLPS_FIFO_CNT7, WR_COLPS_FIFO_CNT8, WR_COLPS_FIFO_NOT_FULL, WR_COLPS_FIFO_FULL, WR_Q_NOT_EMPTY, WR_Q_EMPTY, WR_COLPS_FIFO_NOT_EMPTY, WR_COLPS_FIFO_EMPTY]);

  // transitions(to different)
  wildcard trans t_s_WR_REQ_DEASSRT_s_WR_REQ_ASSRT         (WR_REQ_DEASSRT -> WR_REQ_ASSRT);
  wildcard trans t_s_WR_REQ_ASSRT_s_WR_REQ_DEASSRT         (WR_REQ_ASSRT   -> WR_REQ_DEASSRT);

. for ( $i = 0; $i < 8; $i++ ) {
.   print "  wildcard trans t_s_WR_Q_WR_PTR_DEASSRT_s_WR_Q_WR_PTR_ASSRT$i\t\t(WR_Q_WR_PTR_DEASSRT -> WR_Q_WR_PTR_ASSRT$i\);\n";
.   print "  wildcard trans t_s_WR_Q_WR_PTR_ASSRT$i\_s_WR_Q_WR_PTR_DEASSRT\t\t(WR_Q_WR_PTR_ASSRT$i\ -> WR_Q_WR_PTR_DEASSRT);\n";
.  for ( $j = $i+1; $j < 8; $j++ ) {
// back to back write not possible due to number of clocks between L2-DRAM data
.   print "  wildcard bad_trans t_s_WR_Q_WR_PTR_ASSRT$i\_s_WR_Q_WR_PTR_ASSRT$j\t\t(WR_Q_WR_PTR_ASSRT$i\ -> WR_Q_WR_PTR_ASSRT$j\);\n";
.   print "  wildcard bad_trans t_s_WR_Q_WR_PTR_ASSRT$j\_s_WR_Q_WR_PTR_ASSRT$i\t\t(WR_Q_WR_PTR_ASSRT$j\ -> WR_Q_WR_PTR_ASSRT$i\);\n";
.  }
.}

// back to back read from dram not possible, so converting i->j trans to bad state
. for ( $i = 0; $i < 8; $i++ ) {
.   print "  wildcard trans t_s_WR_Q_RD_PTR_DEASSRT_s_WR_Q_RD_PTR_ASSRT$i\t\t(WR_Q_RD_PTR_DEASSRT -> WR_Q_RD_PTR_ASSRT$i\);\n";
.   print "  wildcard trans t_s_WR_Q_RD_PTR_ASSRT$i\_s_WR_Q_RD_PTR_DEASSRT\t\t(WR_Q_RD_PTR_ASSRT$i\ -> WR_Q_RD_PTR_DEASSRT);\n";
.  for ( $j = $i+1; $j < 8; $j++ ) {
.   print "  wildcard bad_trans t_s_WR_Q_RD_PTR_ASSRT$i\_s_WR_Q_RD_PTR_ASSRT$j\t\t(WR_Q_RD_PTR_ASSRT$i\ -> WR_Q_RD_PTR_ASSRT$j\);\n";
.   print "  wildcard bad_trans t_s_WR_Q_RD_PTR_ASSRT$j\_s_WR_Q_RD_PTR_ASSRT$i\t\t(WR_Q_RD_PTR_ASSRT$j\ -> WR_Q_RD_PTR_ASSRT$i\);\n";
.  }
.}

// back to back read from dram not possible, so converting i->j trans to bad state
. for ( $i = 0; $i < 8; $i++ ) {
.   print "  wildcard trans t_s_WR_Q_RD_PTR_ARB_DEASSRT_s_WR_Q_RD_PTR_ARB_ASSRT$i\t\t(WR_Q_RD_PTR_ARB_DEASSRT -> WR_Q_RD_PTR_ARB_ASSRT$i\);\n";
.   print "  wildcard trans t_s_WR_Q_RD_PTR_ARB_ASSRT$i\_s_WR_Q_RD_PTR_ARB_DEASSRT\t\t(WR_Q_RD_PTR_ARB_ASSRT$i\ -> WR_Q_RD_PTR_ARB_DEASSRT);\n";
.  for ( $j = $i+1; $j < 8; $j++ ) {
.   print "  wildcard bad_trans t_s_WR_Q_RD_PTR_ARB_ASSRT$i\_s_WR_Q_RD_PTR_ARB_ASSRT$j\t\t(WR_Q_RD_PTR_ARB_ASSRT$i\ -> WR_Q_RD_PTR_ARB_ASSRT$j\);\n";
.   print "  wildcard bad_trans t_s_WR_Q_RD_PTR_ARB_ASSRT$j\_s_WR_Q_RD_PTR_ARB_ASSRT$i\t\t(WR_Q_RD_PTR_ARB_ASSRT$j\ -> WR_Q_RD_PTR_ARB_ASSRT$i\);\n";
.  }
.}

. for ( $i = 0; $i < 8; $i++ ) {
.  $j = $i+1;
.   print "  wildcard trans t_s_WR_Q_CNT$i\_s_WR_Q_CNT$j\t\t(WR_Q_CNT$i\ -> WR_Q_CNT$j\);\n";
.   print "  wildcard trans t_s_WR_Q_CNT$j\_s_WR_Q_CNT$i\t\t(WR_Q_CNT$j\ -> WR_Q_CNT$i\);\n";
.}

  wildcard trans t_s_WR_Q_NOT_FULL_s_WR_Q_FULL         (WR_Q_NOT_FULL -> WR_Q_FULL);
  wildcard trans t_s_WR_Q_FULL_s_WR_Q_NOT_FULL         (WR_Q_FULL     -> WR_Q_NOT_FULL);

. for ( $i = 0; $i < 8; $i++ ) {
.  $j = $i+1;
.   print "  wildcard trans t_s_WR_COLPS_FIFO_CNT$i\_s_WR_COLPS_FIFO_CNT$j\t\t(WR_COLPS_FIFO_CNT$i\ -> WR_COLPS_FIFO_CNT$j\);\n";
.   print "  wildcard trans t_s_WR_COLPS_FIFO_CNT$j\_s_WR_COLPS_FIFO_CNT$i\t\t(WR_COLPS_FIFO_CNT$j\ -> WR_COLPS_FIFO_CNT$i\);\n";
.}

  wildcard trans t_s_WR_COLPS_FIFO_NOT_FULL_s_WR_COLPS_FIFO_FULL         (WR_COLPS_FIFO_NOT_FULL -> WR_COLPS_FIFO_FULL);
  wildcard trans t_s_WR_COLPS_FIFO_FULL_s_WR_COLPS_FIFO_NOT_FULL         (WR_COLPS_FIFO_FULL     -> WR_COLPS_FIFO_NOT_FULL);

  wildcard trans t_s_WR_Q_NOT_EMPTY_s_WR_Q_EMPTY         (WR_Q_NOT_EMPTY -> WR_Q_EMPTY);
  wildcard trans t_s_WR_Q_EMPTY_s_WR_Q_NOT_EMPTY         (WR_Q_EMPTY     -> WR_Q_NOT_EMPTY);
  wildcard trans t_s_WR_COLPS_FIFO_NOT_EMPTY_s_WR_COLPS_FIFO_EMPTY         (WR_COLPS_FIFO_NOT_EMPTY -> WR_COLPS_FIFO_EMPTY);
  wildcard trans t_s_WR_COLPS_FIFO_EMPTY_s_WR_COLPS_FIFO_NOT_EMPTY         (WR_COLPS_FIFO_EMPTY     -> WR_COLPS_FIFO_NOT_EMPTY);

  // transitions(combinations) Check if this is achievable,
  // Can the next write request come before the data transfer of current write request?
  wildcard trans t_s_0_to_8_b2b_rd          (WR_REQ_DEASSRT   -> WR_REQ_ASSRT[.1:8.] -> WR_REQ_DEASSRT);


  // bad states
  //bad_state s_not_WR_Q_STATE (not state);

  // bad transitions 
  //bad_trans t_not_WR_Q_TRANS (not trans);

// }

