// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: dram_ports_binds.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#inc "dram_cov_inc.pal";
#ifndef __DRAM_PORTS_VRH__
#define __DRAM_PORTS_VRH__

#include <vera_defines.vrh>

//---------------------------------------------------------------
// The clock port
//---------------------------------------------------------------

//port dram_clk_port {
//  dram_gclk;
//}

//port core_clk_port {
//  cmp_clk;
//  cmp_diag_done;
//  cmp_grst_l;
//}

//---------------------------------------------------------------
// dram_que.v , controller state machine
//---------------------------------------------------------------
port dram_que_fsm {
  que_pos;
}

//---------------------------------------------------------------
// rd que status signals
//---------------------------------------------------------------
port dram_rd_que_status_port {
    rd_que_status;
    // 
    //dram_Ch{c}_rd_req                
    //[7:0] dram_Ch{c}_rd_que_wr_ptr  
    //[7:0] dram_Ch{c}_rd_que_rd_ptr 
    //[3:0] dram_Ch{c}_rd_q_cnt     
    //dram_Ch{c}_rd_q_full         
    //[3:0] dram_Ch{c}_rd_colps_q_cnt 
    //dram_Ch{c}_rd_colps_q_full     
    //dram_Ch{c}_rd_q_empty         
    //dram_Ch{c}_rd_colps_q_empty  

}

port dram_rd_q_full_n_req_port {
    fsm_state;
}

//---------------------------------------------------------------
// wr que status signals
//---------------------------------------------------------------
port dram_wr_que_status_port {
    wr_que_status;
    // 
    //dram_Ch{c}_wr_req                
    //[7:0] dram_Ch{c}_wr_que_wr_ptr  
    //[7:0] dram_Ch{c}_wr_que_rd_ptr 
    //[7:0] dram_Ch{c}_wr_que_rd_ptr_arb 
    //[3:0] dram_Ch{c}_wr_q_cnt     
    //dram_Ch{c}_wr_q_full         
    //[3:0] dram_Ch{c}_wr_colps_q_cnt 
    //dram_Ch{c}_wr_colps_q_full     
    //dram_Ch{c}_wr_q_empty         
    //dram_Ch{c}_wr_colps_q_empty  

}

port dram_wr_q_full_n_req_port {
    fsm_state;
}

port dram_que_wr_picked_port {
    wr_pick;
}

port dram_rd_wr_hit_port {
    rd_wr_hit;
}

// write memory read from the dram side
port dram_wr_data_rd_mem_sample {
    en_n_addr;
}

//---------------------------------------------------------------
// Scrub and request to the same bank, scrb should be picked first.
// No request to same bank in between a scrub
//---------------------------------------------------------------
port dram_scb_req_same_bank_port {
    scb_req;
}
//---------------------------------------------------------------
// Power throttle blk bank open cross with hw refresh issued
//---------------------------------------------------------------
port dram_pt_refresh_blk_bank {
    pt_refresh_blk_bank;
}

//---------------------------------------------------------------
//  refresh monitor signal
//---------------------------------------------------------------
port dram_refresh_all_clr_mon_state_port {
    fsm_state;
}

//---------------------------------------------------------------
//  CAS Queue
//---------------------------------------------------------------
port dram_cas_que_port {
    cas_valid;
}

//---------------------------------------------------------------
//  CAS Queue
//---------------------------------------------------------------
port dram_rd_wr_scrb_schmoo_port {
    rd_wr_scrb_vld;
}

//---------------------------------------------------------------
// RAS/CAS pending cnt, ras_picked, cas_picked
//---------------------------------------------------------------
port dram_ras_cas_pend_cnt_port {
    ras_cas_pend_cnt;
}
port dram_ras_picked_port {
    ras_picked;
}
port dram_cas_picked_port {
    cas_picked;
}

//---------------------------------------------------------------
//  DRAM registers
//---------------------------------------------------------------
port dram_reg_port {
    registers;
}
port dram_reg_ack_nack_port {
    ack_nack;
}

//---------------------------------------------------------------
//  DRAM perf cntr ( control and sticky bit )
//---------------------------------------------------------------
port dram_perf_cntr_port {
    perf;
}

//---------------------------------------------------------------
//  DRAM parameters : (pa_err,s,r,bank,2ch,8bk) * 4 ( = rd/wr*lo/hi)
//---------------------------------------------------------------
port dram_rank_stack_addr_param_rd_hi_port {
    addr_etc_info_rd_hi;
}
port dram_rank_stack_addr_param_wr_hi_port {
    addr_etc_info_wr_hi;
}
port dram_rank_stack_addr_param_rd_lo_port {
    addr_etc_info_rd_lo;
}
port dram_rank_stack_addr_param_wr_lo_port {
    addr_etc_info_wr_lo;
}

//---------------------------------------------------------------
//  DRAM DP
//---------------------------------------------------------------
port dram_dp_pioson_l2_data_port {
    dp_pioson_l2_data;
}

//---------------------------------------------------------------
//  DRAM for line cov
//---------------------------------------------------------------
//port dram_line_cov_port {
//    line_cov;
//}

//---------------------------------------------------------------
//  Q counters to indicate how much time a request spend in RD/WR Q
//---------------------------------------------------------------
port dram_rd_q_cntr_port {
    cntr;
}
port dram_wr_q_cntr_port {
    cntr;
}

//---------------------------------------------------------------
//  Q counters to indicate how much time between
//  1) rd req and rd data return
//  2) wr req and wr ack
//---------------------------------------------------------------
port dram_rd_req_ack_cntr_port {
    cntr;
}
port dram_wr_req_ack_cntr_port {
    cntr;
}


port dram_cs_bank_req_cntr_port {
    cntr;
}


//---------------------------------------------------------------
// DRAM-l2if rd wr handshake signals
//---------------------------------------------------------------
port dram_rd_wr_l2if_port    {
  rd_wr_l2if;
  //dram_Ch{c}_sctag_dram_rd_req,
  //dram_Ch{c}_sctag_dram_rd_dummy_req,
  //dram_Ch{c}_dram_sctag_rd_ack,
  //dram_Ch{c}_sctag_dram_wr_req,
  //dram_Ch{c}_dram_sctag_wr_ack,
  //dram_Ch{c}_sctag_dram_data_vld,
  //[3:0] dram_Ch{c}_l2if_b0_rd_val,
  //[3:0] dram_Ch{c}_l2if_b1_rd_val,
  //[3:0] dram_Ch{c}_l2if_b0_wr_val,
  //[3:0] dram_Ch{c}_l2if_b1_wr_val,
  //[5:0] dram_Ch{c}_l2if_wr_b0_data_addr,
}

// write memory wr from the l2 side
port dram_wr_data_mem_sample {
    en_n_addr;
}

port dram_err_l2if_port    {
  secc_pa_mecc_scb_secc_mecc;
}

port dram_l2if_data_ret_fifo_port    {
  fifo_en;
}

// Error status and enables
port dram_err_sts_port    {
  err_en_n_sts;
}



//---------------------------------------------------------------
// DRAM-l2if freq schmoo between rd/wr req and sync pulse
//---------------------------------------------------------------
port dram_rd_sync_port    {
  rd_sync;
}

port dram_wr_sync_port    {
  wr_sync;
}

//---------------------------------------------------------------
//  JBUS clock ports
//---------------------------------------------------------------
port dram_err_intr_ucb_trig_port    {
  err_intr_ucb_trig;
}
port dram_err_intr_ucb_trig_port1    {
  err_intr_ucb_trig1;
}

port dram_ucb_etc_port    {
  ucb_etc;
}




//---------------------------------------------------------------



. sub coreBindings {
.	my($core_num) = @_;
.	my $c	      = $core_num;

//bind dram_clk_port dram_Ch${c}_dram_clk_bind {
//  dram_gclk        dram_coverage_ifc_dram_clk.dram_gclk;
//}

//bind core_clk_port dram_Ch${c}_core_clk_bind {
//  cmp_clk          dram_coverage_ifc_core_clk.cmp_clk;
//  cmp_diag_done    dram_coverage_ifc_core_clk.cmp_diag_done;
//  cmp_grst_l       dram_coverage_ifc_core_clk.cmp_grst_l;
//}

bind dram_que_fsm ${prefix}dram_que_fsm_sample_bind_Ch${c} {
  que_pos 	dram_coverage_ifc_dram_clk.dram_Ch${c}_que_pos;
  }

bind dram_rd_que_status_port ${prefix}dram_rd_que_status_sample_bind_Ch${c} {
  rd_que_status    {
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_req,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_que_wr_ptr,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_que_rd_ptr,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_q_cnt,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_q_full,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_colps_q_cnt,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_colps_q_full,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_q_empty,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_colps_q_empty
                   };
  }

bind dram_rd_q_full_n_req_port ${prefix}dram_rd_q_full_n_req_sample_bind_Ch${c} {
    fsm_state  dram_coverage_ifc_core_clk.dram_rd_req_q_full_Ch${c}_rd_taken_state;
  }

bind dram_scb_req_same_bank_port ${prefix}dram_scb_req_same_bank_sample_bind_Ch${c} {
    scb_req  {
              dram_coverage_ifc_dram_clk.dram_Ch${c}_scrb_indx_val,
              dram_coverage_ifc_dram_clk.dram_Ch${c}_que_l2req_valid,
              dram_coverage_ifc_dram_clk.dram_Ch${c}_que_pos 
             };
}

bind dram_wr_que_status_port ${prefix}dram_wr_que_status_sample_bind_Ch${c} {
  wr_que_status    {
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_req,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_que_wr_ptr,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_que_rd_ptr,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_que_rd_ptr_arb,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_q_cnt,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_q_full,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_colps_q_cnt,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_colps_q_full,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_q_empty,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_colps_q_empty
                   };
  }

bind dram_wr_q_full_n_req_port ${prefix}dram_wr_q_full_n_req_sample_bind_Ch${c} {
    fsm_state  dram_coverage_ifc_core_clk.dram_wr_req_q_full_Ch${c}_wr_taken_state;
  }

bind dram_que_wr_picked_port  ${prefix}dram_que_pick_wr_first_sample_bind_Ch${c} {
    wr_pick dram_coverage_ifc_dram_clk.dram_Ch${c}_que_pick_wr_first;
  }


bind dram_rd_wr_hit_port ${prefix}dram_rd_wr_hit_sample_bind_Ch${c} {
    rd_wr_hit dram_coverage_ifc_dram_clk.dram_Ch${c}_que_rd_wr_hit;
}

bind dram_refresh_all_clr_mon_state_port ${prefix}dram_refresh_all_clr_mon_state_sample_bind_Ch${c} {
    fsm_state dram_coverage_ifc_dram_clk.dram_Ch${c}_refresh_all_clr_mon_state;
}

bind dram_cas_que_port ${prefix}dram_cas_que_sample_bind_Ch${c} {
    cas_valid dram_coverage_ifc_dram_clk.dram_Ch${c}_que_cas_valid;
}


bind dram_ras_cas_pend_cnt_port ${prefix}dram_ras_cas_pend_cnt_sample_bind_Ch${c} {
    ras_cas_pend_cnt {
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_ras_pend_cnt,
                     dram_coverage_ifc_dram_clk.dram_Ch${c}_cas_pend_cnt
                     };
}
bind dram_ras_picked_port  ${prefix}dram_ras_picked_sample_bind_Ch${c} {
    ras_picked  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_ras_picked;
}
bind dram_cas_picked_port ${prefix}dram_cas_picked_sample_bind_Ch${c} {
    cas_picked  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_cas_picked;
}

bind dram_rd_wr_scrb_schmoo_port ${prefix}dram_rd_wr_scrb_schmoo_sample_bind_Ch${c} {
    rd_wr_scrb_vld { 
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_req_2a_addr_vld,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_req_2a_addr_vld,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_scrb_req_2a_addr_vld 
              };
}

bind dram_reg_port ${prefix}dram_reg_port_sample_bind_Ch${c} {
    registers { 
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_chip_config_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_mode_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rrd_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rc_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rcd_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_wtr_dly_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rtw_dly_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rtp_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_ras_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_rp_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_mrd_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_iwtr_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_ext_mode_reg2,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_ext_mode_reg1,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_ext_mode_reg3,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_eight_bank_mode,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_rank1_present,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_channel_disabled,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_addr_bank_low_sel,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_init,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_data_del_cnt,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_dram_io_pad_clk_inv,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_dram_io_ptr_clk_inv,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wr_mode_reg_done,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_init_status_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_dimms_present,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_dram_fail_over_mode,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_dram_fail_over_mask,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_dbg_trig_en,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_err_sts_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_err_inj_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_sshot_err_reg,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_err_cnt
              };
}


bind dram_perf_cntr_port  ${prefix}dram_perf_cntr_sample_bind_Ch${c} {
    perf {
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_perf_cntl,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_cnt0_sticky_bit, 
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_cnt1_sticky_bit 
             };
}

bind dram_reg_ack_nack_port ${prefix}dram_reg_ack_nack_sample_bind_Ch${c} {
    ack_nack {
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_l2if_ack_vld,
                  dram_coverage_ifc_dram_clk.dram_Ch${c}_que_l2if_nack_vld 
             };
}

bind dram_rank_stack_addr_param_rd_hi_port ${prefix}dram_rank_stack_addr_param_rd_hi_sample_bind_Ch${c} {
    addr_etc_info_rd_hi dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_adr_info_hi;
}
bind dram_rank_stack_addr_param_wr_hi_port ${prefix}dram_rank_stack_addr_param_wr_hi_sample_bind_Ch${c} {
    addr_etc_info_wr_hi dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_adr_info_hi;
}
bind dram_rank_stack_addr_param_rd_lo_port ${prefix}dram_rank_stack_addr_param_rd_lo_sample_bind_Ch${c} {
    addr_etc_info_rd_lo dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_adr_info_lo;
}
bind dram_rank_stack_addr_param_wr_lo_port ${prefix}dram_rank_stack_addr_param_wr_lo_sample_bind_Ch${c} {
    addr_etc_info_wr_lo dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_adr_info_lo;
}

bind dram_wr_data_rd_mem_sample ${prefix}dram_wr_data_rd_mem_sample_bind_Ch${c} {
    en_n_addr dram_coverage_ifc_dram_clk.dram_Ch${c}_que_mem_addr;
}
. for ( $i = 0; $i < 8; $i++ ) {

bind dram_rd_q_cntr_port ${prefix}dram_rd_q_cntr${i}_sample_bind_Ch${c} {
    cntr dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_q_cntr_${i};
}
bind dram_wr_q_cntr_port ${prefix}dram_wr_q_cntr${i}_sample_bind_Ch${c} {
    cntr dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_q_cntr_${i};
}
bind dram_rd_req_ack_cntr_port ${prefix}dram_rd_req_ack_${i}_sample_bind_Ch${c} {
    cntr dram_coverage_ifc_dram_clk.dram_Ch${c}_rd_req_ack_cntr_${i};
}
.}

bind dram_wr_req_ack_cntr_port ${prefix}dram_wr_req_ack_sample_bind_Ch${c} {
    cntr dram_coverage_ifc_dram_clk.dram_Ch${c}_wr_req_ack_cntr;
}

. for ( $ch = 0; $ch < 4; $ch++ ) {
. for ( $i = 0; $i < 8; $i++ ) {
bind dram_cs_bank_req_cntr_port ${prefix}dram_cs${ch}_bank_req_cntr_${i}_sample_bind_Ch${c} {
    cntr dram_coverage_ifc_dram_clk.dram_Ch${c}_cs${ch}_bank_req_cntr_${i};
}
.}
.}

bind dram_dp_pioson_l2_data_port  ${prefix}dram_dp_pioson_l2_data_sample_bind_Ch${c} {
    dp_pioson_l2_data {  dram_coverage_ifc_dram_clk.dram_Ch${c}_dp_pioson_l2_chunk,
                         dram_coverage_ifc_dram_clk.dram_Ch${c}_dp_pioson_l2_data
                      };
}

//
//bind dram_line_cov_port  ${prefix}dram_line_cov_sample_bind_Ch${c} {
//    line_cov   	      { dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wl_addr_cnt0,
//			dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wl_addr_cnt1,
//			dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wl_data_addr0_load_cas2, 
//			dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wl_data_addr0_load,
//			dram_coverage_ifc_dram_clk.dram_Ch${c}_que_wl_data_addr1_load
//                      };
//}

bind dram_rd_wr_l2if_port ${prefix}dram_rd_wr_l2if_sample_bind_Ch${c} {
  rd_wr_l2if    {
                     dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_rd_req,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_rd_dummy_req,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_rd_ack,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_wr_req,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_wr_ack,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_data_vld,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_b0_rd_val,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_b1_rd_val,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_b0_wr_val,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_b1_wr_val
                     //dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_wr_b0_data_addr

                };
  }

bind dram_err_l2if_port ${prefix}dram_err_l2if_sample_bind_Ch${c}    {
  secc_pa_mecc_scb_secc_mecc {
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_secc_err,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_pa_err,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_mecc_err,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_scb_secc_err,
                     dram_coverage_ifc_core_clk.dram_Ch${c}_dram_sctag_scb_secc_err
                              };
}
bind dram_l2if_data_ret_fifo_port ${prefix}dram_l2if_data_ret_fifo_en_sample_bind_Ch${c}    {
  fifo_en dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_data_ret_fifo_en;
}

bind dram_err_sts_port ${prefix}dram_err_sts_sample_bind_Ch${c}    {
  err_en_n_sts  {
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_scrb_val_d2,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_secc_err,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_mecc_err_partial,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_pa_err,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_err_sts_reg,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en6,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en5,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en4,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en3,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en2,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en1,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en0,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_sts_reg_en ,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_addr_reg_en,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_secc_loc_en
                };
}

bind dram_wr_data_mem_sample ${prefix}dram_wr_data_mem_sample_bind_Ch${c} {
    en_n_addr { dram_coverage_ifc_core_clk.dram_Ch${c}_cpu_wr_en,  
                dram_coverage_ifc_core_clk.dram_Ch${c}_cpu_wr_addr
              };
}


bind dram_rd_sync_port  ${prefix}dram_rd_sync_schmoo_sample_bind_Ch${c}   {
  rd_sync       { 
                    dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_rd_req,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_clspine_dram_tx_sync
                };
}

bind dram_wr_sync_port  ${prefix}dram_wr_sync_schmoo_sample_bind_Ch${c}   {
  wr_sync       { 
                    dram_coverage_ifc_core_clk.dram_Ch${c}_sctag_dram_wr_req,
                    dram_coverage_ifc_core_clk.dram_Ch${c}_clspine_dram_tx_sync
                };
}

bind  dram_err_intr_ucb_trig_port ${prefix}dram_err_intr_ucb_trig_sample_bind_Ch${c}    {
  err_intr_ucb_trig {
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_err_intr
                    };
}

bind  dram_err_intr_ucb_trig_port1 ${prefix}dram_err_intr_ucb_trig1_sample_bind_Ch${c}    {
  err_intr_ucb_trig1 {
                    dram_coverage_ifc_core_clk.dram_Ch${c}_l2if_ucb_trig
                    };
}


.
. } # coreBindings
.

bind dram_ucb_etc_port ${prefix}dram_ucb_req_pend_ack_int_busy_sample_bind_Ch0    {
  ucb_etc {
                    dram_coverage_ifc_jbus_clk.dram_Ch0_rd_req_vld,
                    dram_coverage_ifc_jbus_clk.dram_Ch0_ucb_req_pend,
                    dram_coverage_ifc_jbus_clk.dram_Ch0_ucb_dram_ack_busy,
                    dram_coverage_ifc_jbus_clk.dram_Ch0_ucb_dram_int_busy
          };
}

bind dram_ucb_etc_port ${prefix}dram_ucb_req_pend_ack_int_busy_sample_bind_Ch1    {
  ucb_etc {
                    dram_coverage_ifc_jbus_clk.dram_Ch1_rd_req_vld,
                    dram_coverage_ifc_jbus_clk.dram_Ch1_ucb_req_pend,
                    dram_coverage_ifc_jbus_clk.dram_Ch1_ucb_dram_ack_busy,
                    dram_coverage_ifc_jbus_clk.dram_Ch1_ucb_dram_int_busy
          };
}
////
////bind dram_pt_refresh_blk_bank ${prefix}dram_pt_refresh_blk_bank_sample_bind_Ch0 {
////    pt_refresh_blk_bank {
////			dram_coverage_ifc_dram_clk.dram_Ch0_pt_selfrsh,
//			dram_coverage_ifc_dram_clk.dram_Ch0_pt_blk_new_openbank_d1
//     			};
//}
//bind dram_pt_refresh_blk_bank ${prefix}dram_pt_refresh_blk_bank_sample_bind_Ch1 {
//    pt_refresh_blk_bank {
//			dram_coverage_ifc_dram_clk.dram_Ch1_pt_selfrsh,
//			dram_coverage_ifc_dram_clk.dram_Ch1_pt_blk_new_openbank_d1
//     			};
//}

// ***********************************************************
// Declare bindings for each core
// ***********************************************************

. foreach $dr (@DRC_STR) {
.	&coreBindings( $dr );
. }

#endif
