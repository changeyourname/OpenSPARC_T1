// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: coreccx_pcx_retry_req_sample.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================

// cmpccx_pcx_retry_req_cov[11:0] = { (CAS1_RQ or CAS2_RQ request to Bank 3 is speculative),
//                                    (double, single requests to Bank 3),
//                                    (single, single, single requests to Bank 3),
//                                    (CAS1_RQ or CAS2_RQ request to Bank 2 is speculative),
//                                        ... ,
//                                    (single, single, single requests to Bank 0) };

wildcard state C0toB0_single_single_single( {3'bx, 3'bx, 3'bx, 3'b001} );
wildcard state C0toB0_double_single       ( {3'bx, 3'bx, 3'bx, 3'b010} );
wildcard bad_state C0toB0_double_spec     ( {3'bx, 3'bx, 3'bx, 3'b1xx} );

wildcard state C0toB1_single_single_single( {3'bx, 3'bx, 3'b001, 3'bx} );
wildcard state C0toB1_double_single       ( {3'bx, 3'bx, 3'b010, 3'bx} );
wildcard bad_state C0toB1_double_spec     ( {3'bx, 3'bx, 3'b1xx, 3'bx} );

wildcard state C0toB2_single_single_single( {3'bx, 3'b001, 3'bx, 3'bx} );
wildcard state C0toB2_double_single       ( {3'bx, 3'b010, 3'bx, 3'bx} );
wildcard bad_state C0toB2_double_spec     ( {3'bx, 3'b1xx, 3'bx, 3'bx} );

wildcard state C0toB3_single_single_single( {3'b001, 3'bx, 3'bx, 3'bx} );
wildcard state C0toB3_double_single       ( {3'b010, 3'bx, 3'bx, 3'bx} );
wildcard bad_state C0toB3_double_spec     ( {3'b1xx, 3'bx, 3'bx, 3'bx} );
