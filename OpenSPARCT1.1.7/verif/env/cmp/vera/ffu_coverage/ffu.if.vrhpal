// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: ffu.if.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
#inc "ffu_cov_inc.pal";
#ifndef __FFU_IF_VRH__
#define __FFU_IF_VRH__

#include <vera_defines.vrh>

interface ffu_cov_top
 {
  // common signals
  input cmp_clk			CLOCK;
  input cmp_diag_done		PSAMPLE;

.
. sub coreSignals {
.	my( $core_str ) = @_;
.	my $c		= $core_str;
  // signals for ffu_lsu fsm
  input 	C${c}_ffu_lsu_fpop1_ready_w2	PSAMPLE;
  input 	C${c}_ffu_lsu_fpop2_ready_w3	PSAMPLE;
  input 	C${c}_ffu_lsu_fpop_rq_vld	PSAMPLE;

  // signals for ffu_mov_abs_neg
  input 	C${c}_ffu_move_w	PSAMPLE;
  input 	C${c}_ffu_abs_w		PSAMPLE;
  input 	C${c}_ffu_neg_w		PSAMPLE;
  input 	C${c}_ffu_rs2		PSAMPLE;
  input 	C${c}_ffu_rd		PSAMPLE;
  input 	C${c}_ffu_src_sgl	PSAMPLE;
  input 	C${c}_ffu_dst_sgl	PSAMPLE;
  input		C${c}_ffu_unimple_op_w  PSAMPLE;

  // signals for ffu_vis_add_sub
  input		C${c}_ffu_rs1		PSAMPLE;
  input		C${c}_ffu_vis_sel_add	PSAMPLE;
  input		C${c}_ffu_vis_subtract	PSAMPLE;

  // signals for ffu_vis_log
  input		C${c}_ffu_vis_sel_log	PSAMPLE;
  input		C${c}_ffu_visop		PSAMPLE;

  // signals for ffu_rnd
  input	[1:0]	C${c}_ffu_gsr_rnd	PSAMPLE;
  input	[1:0]	C${c}_ffu_fsr_rnd	PSAMPLE;
  input		C${c}_ffu_gsr_im	PSAMPLE;
  input		C${c}_ffu_is_fpop_d	PSAMPLE;

  // signals for ffu_ieee_754_traps
  input [4:0]   C${c}_ffu_fsr_tem	PSAMPLE;
  input [4:0]   C${c}_ffu_fsr_cexc	PSAMPLE;
  input [4:0]   C${c}_ffu_fsr_aexc	PSAMPLE;
  input		C${c}_is_fpu_result	PSAMPLE;
  input [4:0]   C${c}_fpu_exc		PSAMPLE;

  // signals for flush stage
  input		C${c}_ffu_kill_m		PSAMPLE;
  input		C${c}_ffu_killed_w		PSAMPLE;
  input		C${c}_ffu_kill_w		PSAMPLE;
  input		C${c}_ffu_flush_w		PSAMPLE;
  input		C${c}_ffu_flush_w2		PSAMPLE;
  input		C${c}_ffu_ecc_kill_rs2_w2	PSAMPLE;
  input		C${c}_ffu_unimple_op_w2		PSAMPLE;
  input		C${c}_ffu_ifu_tlu_inst_vld_w	PSAMPLE;
  input		C${c}_ffu_thr_match_ww2		PSAMPLE;
  input		C${c}_ffu_any_op_e		PSAMPLE;
  input		C${c}_ffu_any_op_m		PSAMPLE;
  input		C${c}_ffu_any_op_w		PSAMPLE;
  input		C${c}_ffu_lsu_ffu_flush_pipe_w	PSAMPLE;
  input		C${c}_ffu_ifu_tlu_flush_w	PSAMPLE;

  input		C${c}_ffu_fst_w			PSAMPLE;
  input		C${c}_ffu_fst_m			PSAMPLE;
  input		C${c}_ffu_fpu_op_w		PSAMPLE;
  input		C${c}_ffu_fpu_op_m		PSAMPLE;

  // signals for block store
  input		C${c}_ffu_ifu_stall_req		PSAMPLE;
  input	[2:0]	C${c}_ffu_bst_cnt		PSAMPLE;
  input		C${c}_ffu_bst_nceen		PSAMPLE;
  input		C${c}_ffu_bst_op   		PSAMPLE;

  // signals for ECC
  input [1:0]	C${c}_ffu_ce			PSAMPLE;
  input		C${c}_ffu_ue			PSAMPLE;
  input		C${c}_ffu_ecc_rd    		PSAMPLE;
  input		C${c}_ffu_ren_rs1   		PSAMPLE;
  input		C${c}_ffu_ecc_rs2   		PSAMPLE;
  input		C${c}_ffu_combo_ce_rs2 		PSAMPLE;
  input		C${c}_ffu_combo_ue_rs2 		PSAMPLE;
  input		C${c}_ffu_nceen   		PSAMPLE;
  

.
. } # coreSignals
.
. foreach $core ( @CORE_STR ) {

// **********************************************************
// SIGNALS FOR core_$core
// ***********************************************************
.	&coreSignals( $core );
. }

 }

#endif

