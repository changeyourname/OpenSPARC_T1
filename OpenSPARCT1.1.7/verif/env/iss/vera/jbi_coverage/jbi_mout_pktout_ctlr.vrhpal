// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T1 Processor File: jbi_mout_pktout_ctlr.vrhpal
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
// 
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
// 
// The above named program is distributed in the hope that it will be 
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// ========== Copyright Header End ============================================
// ***************************************************************************
//
// File:	jbi_mout_pktout_ctlr.vrhpal
// Description: Coverage object for the jbi_mout jbi_pktout_ctlr state machine.
// ***************************************************************************

// Group:      jbi_mout
// FSM:        pktout_ctlr
// Interfaces:
//    Acronym	RTL signal w/ scope						Interface
//    -------   ----------------------------------------------------------	---------
//    state	"${JBUS_COV_PATH}.jbi.u_mout.pktout_ctlr.state[3:0]"		jbi_jbuscov_ifc


// FSM state/transition file name (this file):
//    {Group}_${FSM}.vrhpal
//
// jbi.if.vrhpal:
//    input    ${Group}_${FSM}_${Acronym}	PSAMPLE;
//       ...
//    input    ${Group}_${FSM}_${Acronym}	PSAMPLE;
//
// jbi_cov.vconpal
//    connect input ${Interface}.${Group}_${FSM}_${Acronym}  = "${RTL}" iskew -1
//       ...
//    connect input ${Interface}.${Group}_${FSM}_${Acronym}  = "${RTL}" iskew -1
//
// jbi_coverage.vrpal
//      sample ${Group}_${FSM}_${Acronym}_bind.\$${Group}_${FSM} {
//        #include "${Group}_${FSM}.vrh"
//        }
//
// jbi_ports_binds.vrhpal (port section):
//      port ${Group}_${FSM}_port {
//              ${Group}_${FSM}_${Acronym};
//		  ...
//              ${Group}_${FSM}_${Acronym};
//      }
//
// jbi_ports_binds.vrhpal (bind section):
//      bind ${Group}_${FSM}_port   ${Group}_${FSM}_sample_bind {
//        ${Group}_${FSM}         {${Interface}.${Group}_${FSM}_${Acronym}};
//          ...
//        ${Group}_${FSM}         {${Interface}.${Group}_${FSM}_${Acronym}};
//        }


  // State declarations.
  state s_IDLE		(JBI_PKTOUT_CTLR_STATE_IDLE);
  state s_RD64_1	(JBI_PKTOUT_CTLR_STATE_RD64_1);
  state s_RD64_2	(JBI_PKTOUT_CTLR_STATE_RD64_2);
  state s_RD64_3	(JBI_PKTOUT_CTLR_STATE_RD64_3);
  state s_NCWR_1	(JBI_PKTOUT_CTLR_STATE_NCWR_1);


  // Transitions.
  trans t_s_IDLE_s_IDLE		(JBI_PKTOUT_CTLR_STATE_IDLE   -> JBI_PKTOUT_CTLR_STATE_IDLE);
  trans t_s_IDLE_s_RD64_1	(JBI_PKTOUT_CTLR_STATE_IDLE   -> JBI_PKTOUT_CTLR_STATE_RD64_1);
  trans t_s_IDLE_s_NCWR_1	(JBI_PKTOUT_CTLR_STATE_IDLE   -> JBI_PKTOUT_CTLR_STATE_NCWR_1);
  trans t_s_RD64_1_s_RD64_2	(JBI_PKTOUT_CTLR_STATE_RD64_1 -> JBI_PKTOUT_CTLR_STATE_RD64_2);
  trans t_s_RD64_2_s_RD64_3	(JBI_PKTOUT_CTLR_STATE_RD64_2 -> JBI_PKTOUT_CTLR_STATE_RD64_3);
  trans t_s_RD64_3_s_IDLE	(JBI_PKTOUT_CTLR_STATE_RD64_3 -> JBI_PKTOUT_CTLR_STATE_IDLE);
  trans t_s_NCWR_1_s_IDLE	(JBI_PKTOUT_CTLR_STATE_NCWR_1 -> JBI_PKTOUT_CTLR_STATE_IDLE);


  // Bad states.
  bad_state s_not_PKTOUT_CTLR_STATE (not state);

  // Bad transitions. 
  //bad_trans t_not_PKTOUT_CTLR_TRANS (not trans);
